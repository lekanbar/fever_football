#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3619
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FF_Classes.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="FeverFootballDB")]
	public partial class FFLinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFF_Article(FF_Article instance);
    partial void UpdateFF_Article(FF_Article instance);
    partial void DeleteFF_Article(FF_Article instance);
    partial void InsertFF_Vote(FF_Vote instance);
    partial void UpdateFF_Vote(FF_Vote instance);
    partial void DeleteFF_Vote(FF_Vote instance);
    partial void InsertFF_ChampionGoalScorer(FF_ChampionGoalScorer instance);
    partial void UpdateFF_ChampionGoalScorer(FF_ChampionGoalScorer instance);
    partial void DeleteFF_ChampionGoalScorer(FF_ChampionGoalScorer instance);
    partial void InsertFF_ChampionsGroupStage(FF_ChampionsGroupStage instance);
    partial void UpdateFF_ChampionsGroupStage(FF_ChampionsGroupStage instance);
    partial void DeleteFF_ChampionsGroupStage(FF_ChampionsGroupStage instance);
    partial void InsertFF_ChampionsLeagueTable(FF_ChampionsLeagueTable instance);
    partial void UpdateFF_ChampionsLeagueTable(FF_ChampionsLeagueTable instance);
    partial void DeleteFF_ChampionsLeagueTable(FF_ChampionsLeagueTable instance);
    partial void InsertFF_ChampionsLegaueGroup(FF_ChampionsLegaueGroup instance);
    partial void UpdateFF_ChampionsLegaueGroup(FF_ChampionsLegaueGroup instance);
    partial void DeleteFF_ChampionsLegaueGroup(FF_ChampionsLegaueGroup instance);
    partial void InsertFF_ChampionsOtherStage(FF_ChampionsOtherStage instance);
    partial void UpdateFF_ChampionsOtherStage(FF_ChampionsOtherStage instance);
    partial void DeleteFF_ChampionsOtherStage(FF_ChampionsOtherStage instance);
    partial void InsertFF_Comment(FF_Comment instance);
    partial void UpdateFF_Comment(FF_Comment instance);
    partial void DeleteFF_Comment(FF_Comment instance);
    partial void InsertFF_Forum(FF_Forum instance);
    partial void UpdateFF_Forum(FF_Forum instance);
    partial void DeleteFF_Forum(FF_Forum instance);
    partial void InsertFF_GoalScorer(FF_GoalScorer instance);
    partial void UpdateFF_GoalScorer(FF_GoalScorer instance);
    partial void DeleteFF_GoalScorer(FF_GoalScorer instance);
    partial void InsertFF_League(FF_League instance);
    partial void UpdateFF_League(FF_League instance);
    partial void DeleteFF_League(FF_League instance);
    partial void InsertFF_LeagueTable(FF_LeagueTable instance);
    partial void UpdateFF_LeagueTable(FF_LeagueTable instance);
    partial void DeleteFF_LeagueTable(FF_LeagueTable instance);
    partial void InsertFF_Match(FF_Match instance);
    partial void UpdateFF_Match(FF_Match instance);
    partial void DeleteFF_Match(FF_Match instance);
    partial void InsertFF_New(FF_New instance);
    partial void UpdateFF_New(FF_New instance);
    partial void DeleteFF_New(FF_New instance);
    partial void InsertFF_Poll(FF_Poll instance);
    partial void UpdateFF_Poll(FF_Poll instance);
    partial void DeleteFF_Poll(FF_Poll instance);
    partial void InsertFF_Role(FF_Role instance);
    partial void UpdateFF_Role(FF_Role instance);
    partial void DeleteFF_Role(FF_Role instance);
    partial void InsertFF_Season(FF_Season instance);
    partial void UpdateFF_Season(FF_Season instance);
    partial void DeleteFF_Season(FF_Season instance);
    partial void InsertFF_Team(FF_Team instance);
    partial void UpdateFF_Team(FF_Team instance);
    partial void DeleteFF_Team(FF_Team instance);
    partial void InsertFF_TopScorer(FF_TopScorer instance);
    partial void UpdateFF_TopScorer(FF_TopScorer instance);
    partial void DeleteFF_TopScorer(FF_TopScorer instance);
    partial void InsertFF_User(FF_User instance);
    partial void UpdateFF_User(FF_User instance);
    partial void DeleteFF_User(FF_User instance);
    partial void InsertFF_UserComment(FF_UserComment instance);
    partial void UpdateFF_UserComment(FF_UserComment instance);
    partial void DeleteFF_UserComment(FF_UserComment instance);
    partial void InsertFF_UserComment2(FF_UserComment2 instance);
    partial void UpdateFF_UserComment2(FF_UserComment2 instance);
    partial void DeleteFF_UserComment2(FF_UserComment2 instance);
    #endregion
		
		public FFLinqDataContext() : 
				base(global::FF_Classes.Properties.Settings.Default.FeverFootballDBConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public FFLinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FFLinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FFLinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FFLinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<FF_Article> FF_Articles
		{
			get
			{
				return this.GetTable<FF_Article>();
			}
		}
		
		public System.Data.Linq.Table<FF_Vote> FF_Votes
		{
			get
			{
				return this.GetTable<FF_Vote>();
			}
		}
		
		public System.Data.Linq.Table<FF_ChampionGoalScorer> FF_ChampionGoalScorers
		{
			get
			{
				return this.GetTable<FF_ChampionGoalScorer>();
			}
		}
		
		public System.Data.Linq.Table<FF_ChampionsGroupStage> FF_ChampionsGroupStages
		{
			get
			{
				return this.GetTable<FF_ChampionsGroupStage>();
			}
		}
		
		public System.Data.Linq.Table<FF_ChampionsLeagueTable> FF_ChampionsLeagueTables
		{
			get
			{
				return this.GetTable<FF_ChampionsLeagueTable>();
			}
		}
		
		public System.Data.Linq.Table<FF_ChampionsLegaueGroup> FF_ChampionsLegaueGroups
		{
			get
			{
				return this.GetTable<FF_ChampionsLegaueGroup>();
			}
		}
		
		public System.Data.Linq.Table<FF_ChampionsOtherStage> FF_ChampionsOtherStages
		{
			get
			{
				return this.GetTable<FF_ChampionsOtherStage>();
			}
		}
		
		public System.Data.Linq.Table<FF_Comment> FF_Comments
		{
			get
			{
				return this.GetTable<FF_Comment>();
			}
		}
		
		public System.Data.Linq.Table<FF_Forum> FF_Forums
		{
			get
			{
				return this.GetTable<FF_Forum>();
			}
		}
		
		public System.Data.Linq.Table<FF_GoalScorer> FF_GoalScorers
		{
			get
			{
				return this.GetTable<FF_GoalScorer>();
			}
		}
		
		public System.Data.Linq.Table<FF_League> FF_Leagues
		{
			get
			{
				return this.GetTable<FF_League>();
			}
		}
		
		public System.Data.Linq.Table<FF_LeagueTable> FF_LeagueTables
		{
			get
			{
				return this.GetTable<FF_LeagueTable>();
			}
		}
		
		public System.Data.Linq.Table<FF_Match> FF_Matches
		{
			get
			{
				return this.GetTable<FF_Match>();
			}
		}
		
		public System.Data.Linq.Table<FF_New> FF_News
		{
			get
			{
				return this.GetTable<FF_New>();
			}
		}
		
		public System.Data.Linq.Table<FF_Poll> FF_Polls
		{
			get
			{
				return this.GetTable<FF_Poll>();
			}
		}
		
		public System.Data.Linq.Table<FF_Role> FF_Roles
		{
			get
			{
				return this.GetTable<FF_Role>();
			}
		}
		
		public System.Data.Linq.Table<FF_Season> FF_Seasons
		{
			get
			{
				return this.GetTable<FF_Season>();
			}
		}
		
		public System.Data.Linq.Table<FF_Team> FF_Teams
		{
			get
			{
				return this.GetTable<FF_Team>();
			}
		}
		
		public System.Data.Linq.Table<FF_TopScorer> FF_TopScorers
		{
			get
			{
				return this.GetTable<FF_TopScorer>();
			}
		}
		
		public System.Data.Linq.Table<FF_User> FF_Users
		{
			get
			{
				return this.GetTable<FF_User>();
			}
		}
		
		public System.Data.Linq.Table<FF_UserComment> FF_UserComments
		{
			get
			{
				return this.GetTable<FF_UserComment>();
			}
		}
		
		public System.Data.Linq.Table<FF_UserComment2> FF_UserComment2s
		{
			get
			{
				return this.GetTable<FF_UserComment2>();
			}
		}
	}
	
	[Table(Name="dbo.FF_Article")]
	public partial class FF_Article : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ArticleID;
		
		private string _Title;
		
		private string _Details;
		
		private string _ImageURL;
		
		private System.Guid _UserID;
		
		private System.DateTime _Date;
		
		private EntityRef<FF_User> _FF_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArticleIDChanging(System.Guid value);
    partial void OnArticleIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnImageURLChanging(string value);
    partial void OnImageURLChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public FF_Article()
		{
			this._FF_User = default(EntityRef<FF_User>);
			OnCreated();
		}
		
		[Column(Storage="_ArticleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ArticleID
		{
			get
			{
				return this._ArticleID;
			}
			set
			{
				if ((this._ArticleID != value))
				{
					this.OnArticleIDChanging(value);
					this.SendPropertyChanging();
					this._ArticleID = value;
					this.SendPropertyChanged("ArticleID");
					this.OnArticleIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Details", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[Column(Storage="_ImageURL", DbType="NVarChar(200)")]
		public string ImageURL
		{
			get
			{
				return this._ImageURL;
			}
			set
			{
				if ((this._ImageURL != value))
				{
					this.OnImageURLChanging(value);
					this.SendPropertyChanging();
					this._ImageURL = value;
					this.SendPropertyChanged("ImageURL");
					this.OnImageURLChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._FF_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Association(Name="FF_User_FF_Article", Storage="_FF_User", ThisKey="UserID", IsForeignKey=true)]
		public FF_User FF_User
		{
			get
			{
				return this._FF_User.Entity;
			}
			set
			{
				FF_User previousValue = this._FF_User.Entity;
				if (((previousValue != value) 
							|| (this._FF_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_User.Entity = null;
						previousValue.FF_Articles.Remove(this);
					}
					this._FF_User.Entity = value;
					if ((value != null))
					{
						value.FF_Articles.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("FF_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FF_Votes")]
	public partial class FF_Vote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _QuestionID;
		
		private string _Option;
		
		private long _Votes;
		
		private EntityRef<FF_Poll> _FF_Poll;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnQuestionIDChanging(string value);
    partial void OnQuestionIDChanged();
    partial void OnOptionChanging(string value);
    partial void OnOptionChanged();
    partial void OnVotesChanging(long value);
    partial void OnVotesChanged();
    #endregion
		
		public FF_Vote()
		{
			this._FF_Poll = default(EntityRef<FF_Poll>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionID", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._FF_Poll.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[Column(Name="[Option]", Storage="_Option", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Option
		{
			get
			{
				return this._Option;
			}
			set
			{
				if ((this._Option != value))
				{
					this.OnOptionChanging(value);
					this.SendPropertyChanging();
					this._Option = value;
					this.SendPropertyChanged("Option");
					this.OnOptionChanged();
				}
			}
		}
		
		[Column(Storage="_Votes", DbType="BigInt NOT NULL")]
		public long Votes
		{
			get
			{
				return this._Votes;
			}
			set
			{
				if ((this._Votes != value))
				{
					this.OnVotesChanging(value);
					this.SendPropertyChanging();
					this._Votes = value;
					this.SendPropertyChanged("Votes");
					this.OnVotesChanged();
				}
			}
		}
		
		[Association(Name="FF_Poll_FF_Vote", Storage="_FF_Poll", ThisKey="QuestionID", IsForeignKey=true)]
		public FF_Poll FF_Poll
		{
			get
			{
				return this._FF_Poll.Entity;
			}
			set
			{
				FF_Poll previousValue = this._FF_Poll.Entity;
				if (((previousValue != value) 
							|| (this._FF_Poll.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_Poll.Entity = null;
						previousValue.FF_Votes.Remove(this);
					}
					this._FF_Poll.Entity = value;
					if ((value != null))
					{
						value.FF_Votes.Add(this);
						this._QuestionID = value.ID;
					}
					else
					{
						this._QuestionID = default(string);
					}
					this.SendPropertyChanged("FF_Poll");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FF_ChampionGoalScorers")]
	public partial class FF_ChampionGoalScorer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Guid _TeamID;
		
		private int _MatchID;
		
		private string _PlayerName;
		
		private string _Minute;
		
		private EntityRef<FF_ChampionsGroupStage> _FF_ChampionsGroupStage;
		
		private EntityRef<FF_Team> _FF_Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTeamIDChanging(System.Guid value);
    partial void OnTeamIDChanged();
    partial void OnMatchIDChanging(int value);
    partial void OnMatchIDChanged();
    partial void OnPlayerNameChanging(string value);
    partial void OnPlayerNameChanged();
    partial void OnMinuteChanging(string value);
    partial void OnMinuteChanged();
    #endregion
		
		public FF_ChampionGoalScorer()
		{
			this._FF_ChampionsGroupStage = default(EntityRef<FF_ChampionsGroupStage>);
			this._FF_Team = default(EntityRef<FF_Team>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_TeamID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._FF_Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[Column(Storage="_MatchID", DbType="Int NOT NULL")]
		public int MatchID
		{
			get
			{
				return this._MatchID;
			}
			set
			{
				if ((this._MatchID != value))
				{
					if (this._FF_ChampionsGroupStage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIDChanging(value);
					this.SendPropertyChanging();
					this._MatchID = value;
					this.SendPropertyChanged("MatchID");
					this.OnMatchIDChanged();
				}
			}
		}
		
		[Column(Storage="_PlayerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PlayerName
		{
			get
			{
				return this._PlayerName;
			}
			set
			{
				if ((this._PlayerName != value))
				{
					this.OnPlayerNameChanging(value);
					this.SendPropertyChanging();
					this._PlayerName = value;
					this.SendPropertyChanged("PlayerName");
					this.OnPlayerNameChanged();
				}
			}
		}
		
		[Column(Storage="_Minute", DbType="NVarChar(3) NOT NULL", CanBeNull=false)]
		public string Minute
		{
			get
			{
				return this._Minute;
			}
			set
			{
				if ((this._Minute != value))
				{
					this.OnMinuteChanging(value);
					this.SendPropertyChanging();
					this._Minute = value;
					this.SendPropertyChanged("Minute");
					this.OnMinuteChanged();
				}
			}
		}
		
		[Association(Name="FF_ChampionsGroupStage_FF_ChampionGoalScorer", Storage="_FF_ChampionsGroupStage", ThisKey="MatchID", IsForeignKey=true)]
		public FF_ChampionsGroupStage FF_ChampionsGroupStage
		{
			get
			{
				return this._FF_ChampionsGroupStage.Entity;
			}
			set
			{
				FF_ChampionsGroupStage previousValue = this._FF_ChampionsGroupStage.Entity;
				if (((previousValue != value) 
							|| (this._FF_ChampionsGroupStage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_ChampionsGroupStage.Entity = null;
						previousValue.FF_ChampionGoalScorers.Remove(this);
					}
					this._FF_ChampionsGroupStage.Entity = value;
					if ((value != null))
					{
						value.FF_ChampionGoalScorers.Add(this);
						this._MatchID = value.ID;
					}
					else
					{
						this._MatchID = default(int);
					}
					this.SendPropertyChanged("FF_ChampionsGroupStage");
				}
			}
		}
		
		[Association(Name="FF_Team_FF_ChampionGoalScorer", Storage="_FF_Team", ThisKey="TeamID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public FF_Team FF_Team
		{
			get
			{
				return this._FF_Team.Entity;
			}
			set
			{
				FF_Team previousValue = this._FF_Team.Entity;
				if (((previousValue != value) 
							|| (this._FF_Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_Team.Entity = null;
						previousValue.FF_ChampionGoalScorers.Remove(this);
					}
					this._FF_Team.Entity = value;
					if ((value != null))
					{
						value.FF_ChampionGoalScorers.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(System.Guid);
					}
					this.SendPropertyChanged("FF_Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FF_ChampionsGroupStages")]
	public partial class FF_ChampionsGroupStage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _SeasonID;
		
		private System.Guid _GroupID;
		
		private System.Guid _Team1ID;
		
		private System.Guid _Team2ID;
		
		private string _Team1PlayerImageURL;
		
		private string _Team2PlayerImageURL;
		
		private string _Team1Details;
		
		private string _Team2Details;
		
		private string _Team1PlayerName;
		
		private string _Team2PlayerName;
		
		private string _Location;
		
		private int _Team1Score;
		
		private int _Team2Score;
		
		private System.DateTime _Date;
		
		private EntitySet<FF_ChampionGoalScorer> _FF_ChampionGoalScorers;
		
		private EntityRef<FF_Season> _FF_Season;
		
		private EntityRef<FF_Team> _FF_Team;
		
		private EntityRef<FF_Team> _FF_Team1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSeasonIDChanging(System.Guid value);
    partial void OnSeasonIDChanged();
    partial void OnGroupIDChanging(System.Guid value);
    partial void OnGroupIDChanged();
    partial void OnTeam1IDChanging(System.Guid value);
    partial void OnTeam1IDChanged();
    partial void OnTeam2IDChanging(System.Guid value);
    partial void OnTeam2IDChanged();
    partial void OnTeam1PlayerImageURLChanging(string value);
    partial void OnTeam1PlayerImageURLChanged();
    partial void OnTeam2PlayerImageURLChanging(string value);
    partial void OnTeam2PlayerImageURLChanged();
    partial void OnTeam1DetailsChanging(string value);
    partial void OnTeam1DetailsChanged();
    partial void OnTeam2DetailsChanging(string value);
    partial void OnTeam2DetailsChanged();
    partial void OnTeam1PlayerNameChanging(string value);
    partial void OnTeam1PlayerNameChanged();
    partial void OnTeam2PlayerNameChanging(string value);
    partial void OnTeam2PlayerNameChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnTeam1ScoreChanging(int value);
    partial void OnTeam1ScoreChanged();
    partial void OnTeam2ScoreChanging(int value);
    partial void OnTeam2ScoreChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public FF_ChampionsGroupStage()
		{
			this._FF_ChampionGoalScorers = new EntitySet<FF_ChampionGoalScorer>(new Action<FF_ChampionGoalScorer>(this.attach_FF_ChampionGoalScorers), new Action<FF_ChampionGoalScorer>(this.detach_FF_ChampionGoalScorers));
			this._FF_Season = default(EntityRef<FF_Season>);
			this._FF_Team = default(EntityRef<FF_Team>);
			this._FF_Team1 = default(EntityRef<FF_Team>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_SeasonID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SeasonID
		{
			get
			{
				return this._SeasonID;
			}
			set
			{
				if ((this._SeasonID != value))
				{
					if (this._FF_Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._SeasonID = value;
					this.SendPropertyChanged("SeasonID");
					this.OnSeasonIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_Team1ID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Team1ID
		{
			get
			{
				return this._Team1ID;
			}
			set
			{
				if ((this._Team1ID != value))
				{
					if (this._FF_Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeam1IDChanging(value);
					this.SendPropertyChanging();
					this._Team1ID = value;
					this.SendPropertyChanged("Team1ID");
					this.OnTeam1IDChanged();
				}
			}
		}
		
		[Column(Storage="_Team2ID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Team2ID
		{
			get
			{
				return this._Team2ID;
			}
			set
			{
				if ((this._Team2ID != value))
				{
					if (this._FF_Team1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeam2IDChanging(value);
					this.SendPropertyChanging();
					this._Team2ID = value;
					this.SendPropertyChanged("Team2ID");
					this.OnTeam2IDChanged();
				}
			}
		}
		
		[Column(Storage="_Team1PlayerImageURL", DbType="NVarChar(200)")]
		public string Team1PlayerImageURL
		{
			get
			{
				return this._Team1PlayerImageURL;
			}
			set
			{
				if ((this._Team1PlayerImageURL != value))
				{
					this.OnTeam1PlayerImageURLChanging(value);
					this.SendPropertyChanging();
					this._Team1PlayerImageURL = value;
					this.SendPropertyChanged("Team1PlayerImageURL");
					this.OnTeam1PlayerImageURLChanged();
				}
			}
		}
		
		[Column(Storage="_Team2PlayerImageURL", DbType="NVarChar(200)")]
		public string Team2PlayerImageURL
		{
			get
			{
				return this._Team2PlayerImageURL;
			}
			set
			{
				if ((this._Team2PlayerImageURL != value))
				{
					this.OnTeam2PlayerImageURLChanging(value);
					this.SendPropertyChanging();
					this._Team2PlayerImageURL = value;
					this.SendPropertyChanged("Team2PlayerImageURL");
					this.OnTeam2PlayerImageURLChanged();
				}
			}
		}
		
		[Column(Storage="_Team1Details", DbType="NVarChar(MAX)")]
		public string Team1Details
		{
			get
			{
				return this._Team1Details;
			}
			set
			{
				if ((this._Team1Details != value))
				{
					this.OnTeam1DetailsChanging(value);
					this.SendPropertyChanging();
					this._Team1Details = value;
					this.SendPropertyChanged("Team1Details");
					this.OnTeam1DetailsChanged();
				}
			}
		}
		
		[Column(Storage="_Team2Details", DbType="NVarChar(MAX)")]
		public string Team2Details
		{
			get
			{
				return this._Team2Details;
			}
			set
			{
				if ((this._Team2Details != value))
				{
					this.OnTeam2DetailsChanging(value);
					this.SendPropertyChanging();
					this._Team2Details = value;
					this.SendPropertyChanged("Team2Details");
					this.OnTeam2DetailsChanged();
				}
			}
		}
		
		[Column(Storage="_Team1PlayerName", DbType="NVarChar(50)")]
		public string Team1PlayerName
		{
			get
			{
				return this._Team1PlayerName;
			}
			set
			{
				if ((this._Team1PlayerName != value))
				{
					this.OnTeam1PlayerNameChanging(value);
					this.SendPropertyChanging();
					this._Team1PlayerName = value;
					this.SendPropertyChanged("Team1PlayerName");
					this.OnTeam1PlayerNameChanged();
				}
			}
		}
		
		[Column(Storage="_Team2PlayerName", DbType="NVarChar(50)")]
		public string Team2PlayerName
		{
			get
			{
				return this._Team2PlayerName;
			}
			set
			{
				if ((this._Team2PlayerName != value))
				{
					this.OnTeam2PlayerNameChanging(value);
					this.SendPropertyChanging();
					this._Team2PlayerName = value;
					this.SendPropertyChanged("Team2PlayerName");
					this.OnTeam2PlayerNameChanged();
				}
			}
		}
		
		[Column(Storage="_Location", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[Column(Storage="_Team1Score", DbType="Int NOT NULL")]
		public int Team1Score
		{
			get
			{
				return this._Team1Score;
			}
			set
			{
				if ((this._Team1Score != value))
				{
					this.OnTeam1ScoreChanging(value);
					this.SendPropertyChanging();
					this._Team1Score = value;
					this.SendPropertyChanged("Team1Score");
					this.OnTeam1ScoreChanged();
				}
			}
		}
		
		[Column(Storage="_Team2Score", DbType="Int NOT NULL")]
		public int Team2Score
		{
			get
			{
				return this._Team2Score;
			}
			set
			{
				if ((this._Team2Score != value))
				{
					this.OnTeam2ScoreChanging(value);
					this.SendPropertyChanging();
					this._Team2Score = value;
					this.SendPropertyChanged("Team2Score");
					this.OnTeam2ScoreChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Association(Name="FF_ChampionsGroupStage_FF_ChampionGoalScorer", Storage="_FF_ChampionGoalScorers", OtherKey="MatchID")]
		public EntitySet<FF_ChampionGoalScorer> FF_ChampionGoalScorers
		{
			get
			{
				return this._FF_ChampionGoalScorers;
			}
			set
			{
				this._FF_ChampionGoalScorers.Assign(value);
			}
		}
		
		[Association(Name="FF_Season_FF_ChampionsGroupStage", Storage="_FF_Season", ThisKey="SeasonID", IsForeignKey=true)]
		public FF_Season FF_Season
		{
			get
			{
				return this._FF_Season.Entity;
			}
			set
			{
				FF_Season previousValue = this._FF_Season.Entity;
				if (((previousValue != value) 
							|| (this._FF_Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_Season.Entity = null;
						previousValue.FF_ChampionsGroupStages.Remove(this);
					}
					this._FF_Season.Entity = value;
					if ((value != null))
					{
						value.FF_ChampionsGroupStages.Add(this);
						this._SeasonID = value.SeasonID;
					}
					else
					{
						this._SeasonID = default(System.Guid);
					}
					this.SendPropertyChanged("FF_Season");
				}
			}
		}
		
		[Association(Name="FF_Team_FF_ChampionsGroupStage", Storage="_FF_Team", ThisKey="Team1ID", IsForeignKey=true)]
		public FF_Team FF_Team
		{
			get
			{
				return this._FF_Team.Entity;
			}
			set
			{
				FF_Team previousValue = this._FF_Team.Entity;
				if (((previousValue != value) 
							|| (this._FF_Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_Team.Entity = null;
						previousValue.FF_ChampionsGroupStages.Remove(this);
					}
					this._FF_Team.Entity = value;
					if ((value != null))
					{
						value.FF_ChampionsGroupStages.Add(this);
						this._Team1ID = value.TeamID;
					}
					else
					{
						this._Team1ID = default(System.Guid);
					}
					this.SendPropertyChanged("FF_Team");
				}
			}
		}
		
		[Association(Name="FF_Team_FF_ChampionsGroupStage1", Storage="_FF_Team1", ThisKey="Team2ID", IsForeignKey=true)]
		public FF_Team FF_Team1
		{
			get
			{
				return this._FF_Team1.Entity;
			}
			set
			{
				FF_Team previousValue = this._FF_Team1.Entity;
				if (((previousValue != value) 
							|| (this._FF_Team1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_Team1.Entity = null;
						previousValue.FF_ChampionsGroupStages1.Remove(this);
					}
					this._FF_Team1.Entity = value;
					if ((value != null))
					{
						value.FF_ChampionsGroupStages1.Add(this);
						this._Team2ID = value.TeamID;
					}
					else
					{
						this._Team2ID = default(System.Guid);
					}
					this.SendPropertyChanged("FF_Team1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FF_ChampionGoalScorers(FF_ChampionGoalScorer entity)
		{
			this.SendPropertyChanging();
			entity.FF_ChampionsGroupStage = this;
		}
		
		private void detach_FF_ChampionGoalScorers(FF_ChampionGoalScorer entity)
		{
			this.SendPropertyChanging();
			entity.FF_ChampionsGroupStage = null;
		}
	}
	
	[Table(Name="dbo.FF_ChampionsLeagueTable")]
	public partial class FF_ChampionsLeagueTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _TeamID;
		
		private int _P;
		
		private int _W;
		
		private int _D;
		
		private int _L;
		
		private int _F;
		
		private int _A;
		
		private int _Diff;
		
		private int _Points;
		
		private System.Guid _SeasonID;
		
		private System.Guid _GroupID;
		
		private EntityRef<FF_ChampionsLegaueGroup> _FF_ChampionsLegaueGroup;
		
		private EntityRef<FF_Season> _FF_Season;
		
		private EntityRef<FF_Team> _FF_Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTeamIDChanging(System.Guid value);
    partial void OnTeamIDChanged();
    partial void OnPChanging(int value);
    partial void OnPChanged();
    partial void OnWChanging(int value);
    partial void OnWChanged();
    partial void OnDChanging(int value);
    partial void OnDChanged();
    partial void OnLChanging(int value);
    partial void OnLChanged();
    partial void OnFChanging(int value);
    partial void OnFChanged();
    partial void OnAChanging(int value);
    partial void OnAChanged();
    partial void OnDiffChanging(int value);
    partial void OnDiffChanged();
    partial void OnPointsChanging(int value);
    partial void OnPointsChanged();
    partial void OnSeasonIDChanging(System.Guid value);
    partial void OnSeasonIDChanged();
    partial void OnGroupIDChanging(System.Guid value);
    partial void OnGroupIDChanged();
    #endregion
		
		public FF_ChampionsLeagueTable()
		{
			this._FF_ChampionsLegaueGroup = default(EntityRef<FF_ChampionsLegaueGroup>);
			this._FF_Season = default(EntityRef<FF_Season>);
			this._FF_Team = default(EntityRef<FF_Team>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_TeamID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._FF_Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[Column(Storage="_P", DbType="Int NOT NULL")]
		public int P
		{
			get
			{
				return this._P;
			}
			set
			{
				if ((this._P != value))
				{
					this.OnPChanging(value);
					this.SendPropertyChanging();
					this._P = value;
					this.SendPropertyChanged("P");
					this.OnPChanged();
				}
			}
		}
		
		[Column(Storage="_W", DbType="Int NOT NULL")]
		public int W
		{
			get
			{
				return this._W;
			}
			set
			{
				if ((this._W != value))
				{
					this.OnWChanging(value);
					this.SendPropertyChanging();
					this._W = value;
					this.SendPropertyChanged("W");
					this.OnWChanged();
				}
			}
		}
		
		[Column(Storage="_D", DbType="Int NOT NULL")]
		public int D
		{
			get
			{
				return this._D;
			}
			set
			{
				if ((this._D != value))
				{
					this.OnDChanging(value);
					this.SendPropertyChanging();
					this._D = value;
					this.SendPropertyChanged("D");
					this.OnDChanged();
				}
			}
		}
		
		[Column(Storage="_L", DbType="Int NOT NULL")]
		public int L
		{
			get
			{
				return this._L;
			}
			set
			{
				if ((this._L != value))
				{
					this.OnLChanging(value);
					this.SendPropertyChanging();
					this._L = value;
					this.SendPropertyChanged("L");
					this.OnLChanged();
				}
			}
		}
		
		[Column(Storage="_F", DbType="Int NOT NULL")]
		public int F
		{
			get
			{
				return this._F;
			}
			set
			{
				if ((this._F != value))
				{
					this.OnFChanging(value);
					this.SendPropertyChanging();
					this._F = value;
					this.SendPropertyChanged("F");
					this.OnFChanged();
				}
			}
		}
		
		[Column(Storage="_A", DbType="Int NOT NULL")]
		public int A
		{
			get
			{
				return this._A;
			}
			set
			{
				if ((this._A != value))
				{
					this.OnAChanging(value);
					this.SendPropertyChanging();
					this._A = value;
					this.SendPropertyChanged("A");
					this.OnAChanged();
				}
			}
		}
		
		[Column(Storage="_Diff", DbType="Int NOT NULL")]
		public int Diff
		{
			get
			{
				return this._Diff;
			}
			set
			{
				if ((this._Diff != value))
				{
					this.OnDiffChanging(value);
					this.SendPropertyChanging();
					this._Diff = value;
					this.SendPropertyChanged("Diff");
					this.OnDiffChanged();
				}
			}
		}
		
		[Column(Storage="_Points", DbType="Int NOT NULL")]
		public int Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[Column(Storage="_SeasonID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SeasonID
		{
			get
			{
				return this._SeasonID;
			}
			set
			{
				if ((this._SeasonID != value))
				{
					if (this._FF_Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._SeasonID = value;
					this.SendPropertyChanged("SeasonID");
					this.OnSeasonIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._FF_ChampionsLegaueGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[Association(Name="FF_ChampionsLegaueGroup_FF_ChampionsLeagueTable", Storage="_FF_ChampionsLegaueGroup", ThisKey="GroupID", IsForeignKey=true)]
		public FF_ChampionsLegaueGroup FF_ChampionsLegaueGroup
		{
			get
			{
				return this._FF_ChampionsLegaueGroup.Entity;
			}
			set
			{
				FF_ChampionsLegaueGroup previousValue = this._FF_ChampionsLegaueGroup.Entity;
				if (((previousValue != value) 
							|| (this._FF_ChampionsLegaueGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_ChampionsLegaueGroup.Entity = null;
						previousValue.FF_ChampionsLeagueTables.Remove(this);
					}
					this._FF_ChampionsLegaueGroup.Entity = value;
					if ((value != null))
					{
						value.FF_ChampionsLeagueTables.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(System.Guid);
					}
					this.SendPropertyChanged("FF_ChampionsLegaueGroup");
				}
			}
		}
		
		[Association(Name="FF_Season_FF_ChampionsLeagueTable", Storage="_FF_Season", ThisKey="SeasonID", IsForeignKey=true)]
		public FF_Season FF_Season
		{
			get
			{
				return this._FF_Season.Entity;
			}
			set
			{
				FF_Season previousValue = this._FF_Season.Entity;
				if (((previousValue != value) 
							|| (this._FF_Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_Season.Entity = null;
						previousValue.FF_ChampionsLeagueTables.Remove(this);
					}
					this._FF_Season.Entity = value;
					if ((value != null))
					{
						value.FF_ChampionsLeagueTables.Add(this);
						this._SeasonID = value.SeasonID;
					}
					else
					{
						this._SeasonID = default(System.Guid);
					}
					this.SendPropertyChanged("FF_Season");
				}
			}
		}
		
		[Association(Name="FF_Team_FF_ChampionsLeagueTable", Storage="_FF_Team", ThisKey="TeamID", IsForeignKey=true)]
		public FF_Team FF_Team
		{
			get
			{
				return this._FF_Team.Entity;
			}
			set
			{
				FF_Team previousValue = this._FF_Team.Entity;
				if (((previousValue != value) 
							|| (this._FF_Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_Team.Entity = null;
						previousValue.FF_ChampionsLeagueTables.Remove(this);
					}
					this._FF_Team.Entity = value;
					if ((value != null))
					{
						value.FF_ChampionsLeagueTables.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(System.Guid);
					}
					this.SendPropertyChanged("FF_Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FF_ChampionsLegaueGroups")]
	public partial class FF_ChampionsLegaueGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private char _Group;
		
		private EntitySet<FF_ChampionsLeagueTable> _FF_ChampionsLeagueTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnGroupChanging(char value);
    partial void OnGroupChanged();
    #endregion
		
		public FF_ChampionsLegaueGroup()
		{
			this._FF_ChampionsLeagueTables = new EntitySet<FF_ChampionsLeagueTable>(new Action<FF_ChampionsLeagueTable>(this.attach_FF_ChampionsLeagueTables), new Action<FF_ChampionsLeagueTable>(this.detach_FF_ChampionsLeagueTables));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Name="[Group]", Storage="_Group", DbType="NVarChar(1) NOT NULL")]
		public char Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				if ((this._Group != value))
				{
					this.OnGroupChanging(value);
					this.SendPropertyChanging();
					this._Group = value;
					this.SendPropertyChanged("Group");
					this.OnGroupChanged();
				}
			}
		}
		
		[Association(Name="FF_ChampionsLegaueGroup_FF_ChampionsLeagueTable", Storage="_FF_ChampionsLeagueTables", OtherKey="GroupID")]
		public EntitySet<FF_ChampionsLeagueTable> FF_ChampionsLeagueTables
		{
			get
			{
				return this._FF_ChampionsLeagueTables;
			}
			set
			{
				this._FF_ChampionsLeagueTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FF_ChampionsLeagueTables(FF_ChampionsLeagueTable entity)
		{
			this.SendPropertyChanging();
			entity.FF_ChampionsLegaueGroup = this;
		}
		
		private void detach_FF_ChampionsLeagueTables(FF_ChampionsLeagueTable entity)
		{
			this.SendPropertyChanging();
			entity.FF_ChampionsLegaueGroup = null;
		}
	}
	
	[Table(Name="dbo.FF_ChampionsOtherStages")]
	public partial class FF_ChampionsOtherStage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _SeasonID;
		
		private System.Guid _Team1ID;
		
		private System.Guid _Team2ID;
		
		private string _Team1PlayerImageURL;
		
		private string _Team2PlayerImageURL;
		
		private string _Team1Details;
		
		private string _Team2Details;
		
		private string _Team1PlayerName;
		
		private string _Team2PlayerName;
		
		private string _Location;
		
		private int _Team1Score;
		
		private int _Team2Score;
		
		private System.DateTime _Date;
		
		private int _Aggregate1;
		
		private int _Aggregate2;
		
		private int _Leg;
		
		private EntityRef<FF_Season> _FF_Season;
		
		private EntityRef<FF_Team> _FF_Team;
		
		private EntityRef<FF_Team> _FF_Team1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSeasonIDChanging(System.Guid value);
    partial void OnSeasonIDChanged();
    partial void OnTeam1IDChanging(System.Guid value);
    partial void OnTeam1IDChanged();
    partial void OnTeam2IDChanging(System.Guid value);
    partial void OnTeam2IDChanged();
    partial void OnTeam1PlayerImageURLChanging(string value);
    partial void OnTeam1PlayerImageURLChanged();
    partial void OnTeam2PlayerImageURLChanging(string value);
    partial void OnTeam2PlayerImageURLChanged();
    partial void OnTeam1DetailsChanging(string value);
    partial void OnTeam1DetailsChanged();
    partial void OnTeam2DetailsChanging(string value);
    partial void OnTeam2DetailsChanged();
    partial void OnTeam1PlayerNameChanging(string value);
    partial void OnTeam1PlayerNameChanged();
    partial void OnTeam2PlayerNameChanging(string value);
    partial void OnTeam2PlayerNameChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnTeam1ScoreChanging(int value);
    partial void OnTeam1ScoreChanged();
    partial void OnTeam2ScoreChanging(int value);
    partial void OnTeam2ScoreChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnAggregate1Changing(int value);
    partial void OnAggregate1Changed();
    partial void OnAggregate2Changing(int value);
    partial void OnAggregate2Changed();
    partial void OnLegChanging(int value);
    partial void OnLegChanged();
    #endregion
		
		public FF_ChampionsOtherStage()
		{
			this._FF_Season = default(EntityRef<FF_Season>);
			this._FF_Team = default(EntityRef<FF_Team>);
			this._FF_Team1 = default(EntityRef<FF_Team>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_SeasonID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SeasonID
		{
			get
			{
				return this._SeasonID;
			}
			set
			{
				if ((this._SeasonID != value))
				{
					if (this._FF_Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._SeasonID = value;
					this.SendPropertyChanged("SeasonID");
					this.OnSeasonIDChanged();
				}
			}
		}
		
		[Column(Storage="_Team1ID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Team1ID
		{
			get
			{
				return this._Team1ID;
			}
			set
			{
				if ((this._Team1ID != value))
				{
					if (this._FF_Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeam1IDChanging(value);
					this.SendPropertyChanging();
					this._Team1ID = value;
					this.SendPropertyChanged("Team1ID");
					this.OnTeam1IDChanged();
				}
			}
		}
		
		[Column(Storage="_Team2ID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Team2ID
		{
			get
			{
				return this._Team2ID;
			}
			set
			{
				if ((this._Team2ID != value))
				{
					if (this._FF_Team1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeam2IDChanging(value);
					this.SendPropertyChanging();
					this._Team2ID = value;
					this.SendPropertyChanged("Team2ID");
					this.OnTeam2IDChanged();
				}
			}
		}
		
		[Column(Storage="_Team1PlayerImageURL", DbType="NVarChar(200)")]
		public string Team1PlayerImageURL
		{
			get
			{
				return this._Team1PlayerImageURL;
			}
			set
			{
				if ((this._Team1PlayerImageURL != value))
				{
					this.OnTeam1PlayerImageURLChanging(value);
					this.SendPropertyChanging();
					this._Team1PlayerImageURL = value;
					this.SendPropertyChanged("Team1PlayerImageURL");
					this.OnTeam1PlayerImageURLChanged();
				}
			}
		}
		
		[Column(Storage="_Team2PlayerImageURL", DbType="NVarChar(200)")]
		public string Team2PlayerImageURL
		{
			get
			{
				return this._Team2PlayerImageURL;
			}
			set
			{
				if ((this._Team2PlayerImageURL != value))
				{
					this.OnTeam2PlayerImageURLChanging(value);
					this.SendPropertyChanging();
					this._Team2PlayerImageURL = value;
					this.SendPropertyChanged("Team2PlayerImageURL");
					this.OnTeam2PlayerImageURLChanged();
				}
			}
		}
		
		[Column(Storage="_Team1Details", DbType="NVarChar(MAX)")]
		public string Team1Details
		{
			get
			{
				return this._Team1Details;
			}
			set
			{
				if ((this._Team1Details != value))
				{
					this.OnTeam1DetailsChanging(value);
					this.SendPropertyChanging();
					this._Team1Details = value;
					this.SendPropertyChanged("Team1Details");
					this.OnTeam1DetailsChanged();
				}
			}
		}
		
		[Column(Storage="_Team2Details", DbType="NVarChar(MAX)")]
		public string Team2Details
		{
			get
			{
				return this._Team2Details;
			}
			set
			{
				if ((this._Team2Details != value))
				{
					this.OnTeam2DetailsChanging(value);
					this.SendPropertyChanging();
					this._Team2Details = value;
					this.SendPropertyChanged("Team2Details");
					this.OnTeam2DetailsChanged();
				}
			}
		}
		
		[Column(Storage="_Team1PlayerName", DbType="NVarChar(50)")]
		public string Team1PlayerName
		{
			get
			{
				return this._Team1PlayerName;
			}
			set
			{
				if ((this._Team1PlayerName != value))
				{
					this.OnTeam1PlayerNameChanging(value);
					this.SendPropertyChanging();
					this._Team1PlayerName = value;
					this.SendPropertyChanged("Team1PlayerName");
					this.OnTeam1PlayerNameChanged();
				}
			}
		}
		
		[Column(Storage="_Team2PlayerName", DbType="NVarChar(50)")]
		public string Team2PlayerName
		{
			get
			{
				return this._Team2PlayerName;
			}
			set
			{
				if ((this._Team2PlayerName != value))
				{
					this.OnTeam2PlayerNameChanging(value);
					this.SendPropertyChanging();
					this._Team2PlayerName = value;
					this.SendPropertyChanged("Team2PlayerName");
					this.OnTeam2PlayerNameChanged();
				}
			}
		}
		
		[Column(Storage="_Location", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[Column(Storage="_Team1Score", DbType="Int NOT NULL")]
		public int Team1Score
		{
			get
			{
				return this._Team1Score;
			}
			set
			{
				if ((this._Team1Score != value))
				{
					this.OnTeam1ScoreChanging(value);
					this.SendPropertyChanging();
					this._Team1Score = value;
					this.SendPropertyChanged("Team1Score");
					this.OnTeam1ScoreChanged();
				}
			}
		}
		
		[Column(Storage="_Team2Score", DbType="Int NOT NULL")]
		public int Team2Score
		{
			get
			{
				return this._Team2Score;
			}
			set
			{
				if ((this._Team2Score != value))
				{
					this.OnTeam2ScoreChanging(value);
					this.SendPropertyChanging();
					this._Team2Score = value;
					this.SendPropertyChanged("Team2Score");
					this.OnTeam2ScoreChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Aggregate1", DbType="Int NOT NULL")]
		public int Aggregate1
		{
			get
			{
				return this._Aggregate1;
			}
			set
			{
				if ((this._Aggregate1 != value))
				{
					this.OnAggregate1Changing(value);
					this.SendPropertyChanging();
					this._Aggregate1 = value;
					this.SendPropertyChanged("Aggregate1");
					this.OnAggregate1Changed();
				}
			}
		}
		
		[Column(Storage="_Aggregate2", DbType="Int NOT NULL")]
		public int Aggregate2
		{
			get
			{
				return this._Aggregate2;
			}
			set
			{
				if ((this._Aggregate2 != value))
				{
					this.OnAggregate2Changing(value);
					this.SendPropertyChanging();
					this._Aggregate2 = value;
					this.SendPropertyChanged("Aggregate2");
					this.OnAggregate2Changed();
				}
			}
		}
		
		[Column(Storage="_Leg", DbType="Int NOT NULL")]
		public int Leg
		{
			get
			{
				return this._Leg;
			}
			set
			{
				if ((this._Leg != value))
				{
					this.OnLegChanging(value);
					this.SendPropertyChanging();
					this._Leg = value;
					this.SendPropertyChanged("Leg");
					this.OnLegChanged();
				}
			}
		}
		
		[Association(Name="FF_Season_FF_ChampionsOtherStage", Storage="_FF_Season", ThisKey="SeasonID", IsForeignKey=true)]
		public FF_Season FF_Season
		{
			get
			{
				return this._FF_Season.Entity;
			}
			set
			{
				FF_Season previousValue = this._FF_Season.Entity;
				if (((previousValue != value) 
							|| (this._FF_Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_Season.Entity = null;
						previousValue.FF_ChampionsOtherStages.Remove(this);
					}
					this._FF_Season.Entity = value;
					if ((value != null))
					{
						value.FF_ChampionsOtherStages.Add(this);
						this._SeasonID = value.SeasonID;
					}
					else
					{
						this._SeasonID = default(System.Guid);
					}
					this.SendPropertyChanged("FF_Season");
				}
			}
		}
		
		[Association(Name="FF_Team_FF_ChampionsOtherStage", Storage="_FF_Team", ThisKey="Team1ID", IsForeignKey=true)]
		public FF_Team FF_Team
		{
			get
			{
				return this._FF_Team.Entity;
			}
			set
			{
				FF_Team previousValue = this._FF_Team.Entity;
				if (((previousValue != value) 
							|| (this._FF_Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_Team.Entity = null;
						previousValue.FF_ChampionsOtherStages.Remove(this);
					}
					this._FF_Team.Entity = value;
					if ((value != null))
					{
						value.FF_ChampionsOtherStages.Add(this);
						this._Team1ID = value.TeamID;
					}
					else
					{
						this._Team1ID = default(System.Guid);
					}
					this.SendPropertyChanged("FF_Team");
				}
			}
		}
		
		[Association(Name="FF_Team_FF_ChampionsOtherStage1", Storage="_FF_Team1", ThisKey="Team2ID", IsForeignKey=true)]
		public FF_Team FF_Team1
		{
			get
			{
				return this._FF_Team1.Entity;
			}
			set
			{
				FF_Team previousValue = this._FF_Team1.Entity;
				if (((previousValue != value) 
							|| (this._FF_Team1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_Team1.Entity = null;
						previousValue.FF_ChampionsOtherStages1.Remove(this);
					}
					this._FF_Team1.Entity = value;
					if ((value != null))
					{
						value.FF_ChampionsOtherStages1.Add(this);
						this._Team2ID = value.TeamID;
					}
					else
					{
						this._Team2ID = default(System.Guid);
					}
					this.SendPropertyChanged("FF_Team1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FF_Comments")]
	public partial class FF_Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Details;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Guid _OwnerID;
		
		private EntitySet<FF_UserComment> _FF_UserComments;
		
		private EntitySet<FF_UserComment2> _FF_UserComment2s;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnOwnerIDChanging(System.Guid value);
    partial void OnOwnerIDChanged();
    #endregion
		
		public FF_Comment()
		{
			this._FF_UserComments = new EntitySet<FF_UserComment>(new Action<FF_UserComment>(this.attach_FF_UserComments), new Action<FF_UserComment>(this.detach_FF_UserComments));
			this._FF_UserComment2s = new EntitySet<FF_UserComment2>(new Action<FF_UserComment2>(this.attach_FF_UserComment2s), new Action<FF_UserComment2>(this.detach_FF_UserComment2s));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Details", DbType="NVarChar(MAX)")]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_OwnerID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[Association(Name="FF_Comment_FF_UserComment", Storage="_FF_UserComments", OtherKey="CommentID")]
		public EntitySet<FF_UserComment> FF_UserComments
		{
			get
			{
				return this._FF_UserComments;
			}
			set
			{
				this._FF_UserComments.Assign(value);
			}
		}
		
		[Association(Name="FF_Comment_FF_UserComment2", Storage="_FF_UserComment2s", OtherKey="CommentID")]
		public EntitySet<FF_UserComment2> FF_UserComment2s
		{
			get
			{
				return this._FF_UserComment2s;
			}
			set
			{
				this._FF_UserComment2s.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FF_UserComments(FF_UserComment entity)
		{
			this.SendPropertyChanging();
			entity.FF_Comment = this;
		}
		
		private void detach_FF_UserComments(FF_UserComment entity)
		{
			this.SendPropertyChanging();
			entity.FF_Comment = null;
		}
		
		private void attach_FF_UserComment2s(FF_UserComment2 entity)
		{
			this.SendPropertyChanging();
			entity.FF_Comment = this;
		}
		
		private void detach_FF_UserComment2s(FF_UserComment2 entity)
		{
			this.SendPropertyChanging();
			entity.FF_Comment = null;
		}
	}
	
	[Table(Name="dbo.FF_Forum")]
	public partial class FF_Forum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ForumID;
		
		private string _Topic;
		
		private string _Details;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _ImageURL;
		
		private System.Guid _PostedBy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnForumIDChanging(System.Guid value);
    partial void OnForumIDChanged();
    partial void OnTopicChanging(string value);
    partial void OnTopicChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnImageURLChanging(string value);
    partial void OnImageURLChanged();
    partial void OnPostedByChanging(System.Guid value);
    partial void OnPostedByChanged();
    #endregion
		
		public FF_Forum()
		{
			OnCreated();
		}
		
		[Column(Storage="_ForumID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ForumID
		{
			get
			{
				return this._ForumID;
			}
			set
			{
				if ((this._ForumID != value))
				{
					this.OnForumIDChanging(value);
					this.SendPropertyChanging();
					this._ForumID = value;
					this.SendPropertyChanged("ForumID");
					this.OnForumIDChanged();
				}
			}
		}
		
		[Column(Storage="_Topic", DbType="NVarChar(100)")]
		public string Topic
		{
			get
			{
				return this._Topic;
			}
			set
			{
				if ((this._Topic != value))
				{
					this.OnTopicChanging(value);
					this.SendPropertyChanging();
					this._Topic = value;
					this.SendPropertyChanged("Topic");
					this.OnTopicChanged();
				}
			}
		}
		
		[Column(Storage="_Details", DbType="NVarChar(MAX)")]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_ImageURL", DbType="NVarChar(200)")]
		public string ImageURL
		{
			get
			{
				return this._ImageURL;
			}
			set
			{
				if ((this._ImageURL != value))
				{
					this.OnImageURLChanging(value);
					this.SendPropertyChanging();
					this._ImageURL = value;
					this.SendPropertyChanged("ImageURL");
					this.OnImageURLChanged();
				}
			}
		}
		
		[Column(Storage="_PostedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PostedBy
		{
			get
			{
				return this._PostedBy;
			}
			set
			{
				if ((this._PostedBy != value))
				{
					this.OnPostedByChanging(value);
					this.SendPropertyChanging();
					this._PostedBy = value;
					this.SendPropertyChanged("PostedBy");
					this.OnPostedByChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FF_GoalScorers")]
	public partial class FF_GoalScorer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Guid _TeamID;
		
		private int _MatchID;
		
		private string _PlayerName;
		
		private string _Minute;
		
		private EntityRef<FF_Match> _FF_Match;
		
		private EntityRef<FF_Team> _FF_Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTeamIDChanging(System.Guid value);
    partial void OnTeamIDChanged();
    partial void OnMatchIDChanging(int value);
    partial void OnMatchIDChanged();
    partial void OnPlayerNameChanging(string value);
    partial void OnPlayerNameChanged();
    partial void OnMinuteChanging(string value);
    partial void OnMinuteChanged();
    #endregion
		
		public FF_GoalScorer()
		{
			this._FF_Match = default(EntityRef<FF_Match>);
			this._FF_Team = default(EntityRef<FF_Team>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_TeamID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._FF_Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[Column(Storage="_MatchID", DbType="Int NOT NULL")]
		public int MatchID
		{
			get
			{
				return this._MatchID;
			}
			set
			{
				if ((this._MatchID != value))
				{
					if (this._FF_Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIDChanging(value);
					this.SendPropertyChanging();
					this._MatchID = value;
					this.SendPropertyChanged("MatchID");
					this.OnMatchIDChanged();
				}
			}
		}
		
		[Column(Storage="_PlayerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PlayerName
		{
			get
			{
				return this._PlayerName;
			}
			set
			{
				if ((this._PlayerName != value))
				{
					this.OnPlayerNameChanging(value);
					this.SendPropertyChanging();
					this._PlayerName = value;
					this.SendPropertyChanged("PlayerName");
					this.OnPlayerNameChanged();
				}
			}
		}
		
		[Column(Storage="_Minute", DbType="NVarChar(3) NOT NULL", CanBeNull=false)]
		public string Minute
		{
			get
			{
				return this._Minute;
			}
			set
			{
				if ((this._Minute != value))
				{
					this.OnMinuteChanging(value);
					this.SendPropertyChanging();
					this._Minute = value;
					this.SendPropertyChanged("Minute");
					this.OnMinuteChanged();
				}
			}
		}
		
		[Association(Name="FF_Match_FF_GoalScorer", Storage="_FF_Match", ThisKey="MatchID", IsForeignKey=true)]
		public FF_Match FF_Match
		{
			get
			{
				return this._FF_Match.Entity;
			}
			set
			{
				FF_Match previousValue = this._FF_Match.Entity;
				if (((previousValue != value) 
							|| (this._FF_Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_Match.Entity = null;
						previousValue.FF_GoalScorers.Remove(this);
					}
					this._FF_Match.Entity = value;
					if ((value != null))
					{
						value.FF_GoalScorers.Add(this);
						this._MatchID = value.ID;
					}
					else
					{
						this._MatchID = default(int);
					}
					this.SendPropertyChanged("FF_Match");
				}
			}
		}
		
		[Association(Name="FF_Team_FF_GoalScorer", Storage="_FF_Team", ThisKey="TeamID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public FF_Team FF_Team
		{
			get
			{
				return this._FF_Team.Entity;
			}
			set
			{
				FF_Team previousValue = this._FF_Team.Entity;
				if (((previousValue != value) 
							|| (this._FF_Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_Team.Entity = null;
						previousValue.FF_GoalScorers.Remove(this);
					}
					this._FF_Team.Entity = value;
					if ((value != null))
					{
						value.FF_GoalScorers.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(System.Guid);
					}
					this.SendPropertyChanged("FF_Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FF_Leagues")]
	public partial class FF_League : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LeagueID;
		
		private string _Name;
		
		private string _LogoURL;
		
		private EntitySet<FF_LeagueTable> _FF_LeagueTables;
		
		private EntitySet<FF_Match> _FF_Matches;
		
		private EntitySet<FF_New> _FF_News;
		
		private EntitySet<FF_Team> _FF_Teams;
		
		private EntitySet<FF_TopScorer> _FF_TopScorers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLeagueIDChanging(int value);
    partial void OnLeagueIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLogoURLChanging(string value);
    partial void OnLogoURLChanged();
    #endregion
		
		public FF_League()
		{
			this._FF_LeagueTables = new EntitySet<FF_LeagueTable>(new Action<FF_LeagueTable>(this.attach_FF_LeagueTables), new Action<FF_LeagueTable>(this.detach_FF_LeagueTables));
			this._FF_Matches = new EntitySet<FF_Match>(new Action<FF_Match>(this.attach_FF_Matches), new Action<FF_Match>(this.detach_FF_Matches));
			this._FF_News = new EntitySet<FF_New>(new Action<FF_New>(this.attach_FF_News), new Action<FF_New>(this.detach_FF_News));
			this._FF_Teams = new EntitySet<FF_Team>(new Action<FF_Team>(this.attach_FF_Teams), new Action<FF_Team>(this.detach_FF_Teams));
			this._FF_TopScorers = new EntitySet<FF_TopScorer>(new Action<FF_TopScorer>(this.attach_FF_TopScorers), new Action<FF_TopScorer>(this.detach_FF_TopScorers));
			OnCreated();
		}
		
		[Column(Storage="_LeagueID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LeagueID
		{
			get
			{
				return this._LeagueID;
			}
			set
			{
				if ((this._LeagueID != value))
				{
					this.OnLeagueIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueID = value;
					this.SendPropertyChanged("LeagueID");
					this.OnLeagueIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_LogoURL", DbType="NVarChar(200)")]
		public string LogoURL
		{
			get
			{
				return this._LogoURL;
			}
			set
			{
				if ((this._LogoURL != value))
				{
					this.OnLogoURLChanging(value);
					this.SendPropertyChanging();
					this._LogoURL = value;
					this.SendPropertyChanged("LogoURL");
					this.OnLogoURLChanged();
				}
			}
		}
		
		[Association(Name="FF_League_FF_LeagueTable", Storage="_FF_LeagueTables", OtherKey="LeagueID")]
		public EntitySet<FF_LeagueTable> FF_LeagueTables
		{
			get
			{
				return this._FF_LeagueTables;
			}
			set
			{
				this._FF_LeagueTables.Assign(value);
			}
		}
		
		[Association(Name="FF_League_FF_Match", Storage="_FF_Matches", OtherKey="LeagueID")]
		public EntitySet<FF_Match> FF_Matches
		{
			get
			{
				return this._FF_Matches;
			}
			set
			{
				this._FF_Matches.Assign(value);
			}
		}
		
		[Association(Name="FF_League_FF_New", Storage="_FF_News", OtherKey="LeagueID")]
		public EntitySet<FF_New> FF_News
		{
			get
			{
				return this._FF_News;
			}
			set
			{
				this._FF_News.Assign(value);
			}
		}
		
		[Association(Name="FF_League_FF_Team", Storage="_FF_Teams", OtherKey="LeagueID")]
		public EntitySet<FF_Team> FF_Teams
		{
			get
			{
				return this._FF_Teams;
			}
			set
			{
				this._FF_Teams.Assign(value);
			}
		}
		
		[Association(Name="FF_League_FF_TopScorer", Storage="_FF_TopScorers", OtherKey="LeagueID")]
		public EntitySet<FF_TopScorer> FF_TopScorers
		{
			get
			{
				return this._FF_TopScorers;
			}
			set
			{
				this._FF_TopScorers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FF_LeagueTables(FF_LeagueTable entity)
		{
			this.SendPropertyChanging();
			entity.FF_League = this;
		}
		
		private void detach_FF_LeagueTables(FF_LeagueTable entity)
		{
			this.SendPropertyChanging();
			entity.FF_League = null;
		}
		
		private void attach_FF_Matches(FF_Match entity)
		{
			this.SendPropertyChanging();
			entity.FF_League = this;
		}
		
		private void detach_FF_Matches(FF_Match entity)
		{
			this.SendPropertyChanging();
			entity.FF_League = null;
		}
		
		private void attach_FF_News(FF_New entity)
		{
			this.SendPropertyChanging();
			entity.FF_League = this;
		}
		
		private void detach_FF_News(FF_New entity)
		{
			this.SendPropertyChanging();
			entity.FF_League = null;
		}
		
		private void attach_FF_Teams(FF_Team entity)
		{
			this.SendPropertyChanging();
			entity.FF_League = this;
		}
		
		private void detach_FF_Teams(FF_Team entity)
		{
			this.SendPropertyChanging();
			entity.FF_League = null;
		}
		
		private void attach_FF_TopScorers(FF_TopScorer entity)
		{
			this.SendPropertyChanging();
			entity.FF_League = this;
		}
		
		private void detach_FF_TopScorers(FF_TopScorer entity)
		{
			this.SendPropertyChanging();
			entity.FF_League = null;
		}
	}
	
	[Table(Name="dbo.FF_LeagueTables")]
	public partial class FF_LeagueTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _TeamID;
		
		private int _P;
		
		private int _W;
		
		private int _D;
		
		private int _L;
		
		private int _F;
		
		private int _A;
		
		private int _Diff;
		
		private int _Points;
		
		private System.Guid _SeasonID;
		
		private int _LeagueID;
		
		private EntityRef<FF_League> _FF_League;
		
		private EntityRef<FF_Season> _FF_Season;
		
		private EntityRef<FF_Team> _FF_Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTeamIDChanging(System.Guid value);
    partial void OnTeamIDChanged();
    partial void OnPChanging(int value);
    partial void OnPChanged();
    partial void OnWChanging(int value);
    partial void OnWChanged();
    partial void OnDChanging(int value);
    partial void OnDChanged();
    partial void OnLChanging(int value);
    partial void OnLChanged();
    partial void OnFChanging(int value);
    partial void OnFChanged();
    partial void OnAChanging(int value);
    partial void OnAChanged();
    partial void OnDiffChanging(int value);
    partial void OnDiffChanged();
    partial void OnPointsChanging(int value);
    partial void OnPointsChanged();
    partial void OnSeasonIDChanging(System.Guid value);
    partial void OnSeasonIDChanged();
    partial void OnLeagueIDChanging(int value);
    partial void OnLeagueIDChanged();
    #endregion
		
		public FF_LeagueTable()
		{
			this._FF_League = default(EntityRef<FF_League>);
			this._FF_Season = default(EntityRef<FF_Season>);
			this._FF_Team = default(EntityRef<FF_Team>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_TeamID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._FF_Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[Column(Storage="_P", DbType="Int NOT NULL")]
		public int P
		{
			get
			{
				return this._P;
			}
			set
			{
				if ((this._P != value))
				{
					this.OnPChanging(value);
					this.SendPropertyChanging();
					this._P = value;
					this.SendPropertyChanged("P");
					this.OnPChanged();
				}
			}
		}
		
		[Column(Storage="_W", DbType="Int NOT NULL")]
		public int W
		{
			get
			{
				return this._W;
			}
			set
			{
				if ((this._W != value))
				{
					this.OnWChanging(value);
					this.SendPropertyChanging();
					this._W = value;
					this.SendPropertyChanged("W");
					this.OnWChanged();
				}
			}
		}
		
		[Column(Storage="_D", DbType="Int NOT NULL")]
		public int D
		{
			get
			{
				return this._D;
			}
			set
			{
				if ((this._D != value))
				{
					this.OnDChanging(value);
					this.SendPropertyChanging();
					this._D = value;
					this.SendPropertyChanged("D");
					this.OnDChanged();
				}
			}
		}
		
		[Column(Storage="_L", DbType="Int NOT NULL")]
		public int L
		{
			get
			{
				return this._L;
			}
			set
			{
				if ((this._L != value))
				{
					this.OnLChanging(value);
					this.SendPropertyChanging();
					this._L = value;
					this.SendPropertyChanged("L");
					this.OnLChanged();
				}
			}
		}
		
		[Column(Storage="_F", DbType="Int NOT NULL")]
		public int F
		{
			get
			{
				return this._F;
			}
			set
			{
				if ((this._F != value))
				{
					this.OnFChanging(value);
					this.SendPropertyChanging();
					this._F = value;
					this.SendPropertyChanged("F");
					this.OnFChanged();
				}
			}
		}
		
		[Column(Storage="_A", DbType="Int NOT NULL")]
		public int A
		{
			get
			{
				return this._A;
			}
			set
			{
				if ((this._A != value))
				{
					this.OnAChanging(value);
					this.SendPropertyChanging();
					this._A = value;
					this.SendPropertyChanged("A");
					this.OnAChanged();
				}
			}
		}
		
		[Column(Storage="_Diff", DbType="Int NOT NULL")]
		public int Diff
		{
			get
			{
				return this._Diff;
			}
			set
			{
				if ((this._Diff != value))
				{
					this.OnDiffChanging(value);
					this.SendPropertyChanging();
					this._Diff = value;
					this.SendPropertyChanged("Diff");
					this.OnDiffChanged();
				}
			}
		}
		
		[Column(Storage="_Points", DbType="Int NOT NULL")]
		public int Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[Column(Storage="_SeasonID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SeasonID
		{
			get
			{
				return this._SeasonID;
			}
			set
			{
				if ((this._SeasonID != value))
				{
					if (this._FF_Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._SeasonID = value;
					this.SendPropertyChanged("SeasonID");
					this.OnSeasonIDChanged();
				}
			}
		}
		
		[Column(Storage="_LeagueID", DbType="Int NOT NULL")]
		public int LeagueID
		{
			get
			{
				return this._LeagueID;
			}
			set
			{
				if ((this._LeagueID != value))
				{
					if (this._FF_League.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueID = value;
					this.SendPropertyChanged("LeagueID");
					this.OnLeagueIDChanged();
				}
			}
		}
		
		[Association(Name="FF_League_FF_LeagueTable", Storage="_FF_League", ThisKey="LeagueID", IsForeignKey=true)]
		public FF_League FF_League
		{
			get
			{
				return this._FF_League.Entity;
			}
			set
			{
				FF_League previousValue = this._FF_League.Entity;
				if (((previousValue != value) 
							|| (this._FF_League.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_League.Entity = null;
						previousValue.FF_LeagueTables.Remove(this);
					}
					this._FF_League.Entity = value;
					if ((value != null))
					{
						value.FF_LeagueTables.Add(this);
						this._LeagueID = value.LeagueID;
					}
					else
					{
						this._LeagueID = default(int);
					}
					this.SendPropertyChanged("FF_League");
				}
			}
		}
		
		[Association(Name="FF_Season_FF_LeagueTable", Storage="_FF_Season", ThisKey="SeasonID", IsForeignKey=true)]
		public FF_Season FF_Season
		{
			get
			{
				return this._FF_Season.Entity;
			}
			set
			{
				FF_Season previousValue = this._FF_Season.Entity;
				if (((previousValue != value) 
							|| (this._FF_Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_Season.Entity = null;
						previousValue.FF_LeagueTables.Remove(this);
					}
					this._FF_Season.Entity = value;
					if ((value != null))
					{
						value.FF_LeagueTables.Add(this);
						this._SeasonID = value.SeasonID;
					}
					else
					{
						this._SeasonID = default(System.Guid);
					}
					this.SendPropertyChanged("FF_Season");
				}
			}
		}
		
		[Association(Name="FF_Team_FF_LeagueTable", Storage="_FF_Team", ThisKey="TeamID", IsForeignKey=true)]
		public FF_Team FF_Team
		{
			get
			{
				return this._FF_Team.Entity;
			}
			set
			{
				FF_Team previousValue = this._FF_Team.Entity;
				if (((previousValue != value) 
							|| (this._FF_Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_Team.Entity = null;
						previousValue.FF_LeagueTables.Remove(this);
					}
					this._FF_Team.Entity = value;
					if ((value != null))
					{
						value.FF_LeagueTables.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(System.Guid);
					}
					this.SendPropertyChanged("FF_Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FF_Matches")]
	public partial class FF_Match : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _SeasonID;
		
		private int _LeagueID;
		
		private System.Guid _Team1ID;
		
		private System.Guid _Team2ID;
		
		private string _Team1PlayerImageURL;
		
		private string _Team2PlayerImageURL;
		
		private string _Team1Details;
		
		private string _Team2Details;
		
		private string _Team1PlayerName;
		
		private string _Team2PlayerName;
		
		private string _Location;
		
		private int _Team1Score;
		
		private int _Team2Score;
		
		private System.DateTime _Date;
		
		private EntitySet<FF_GoalScorer> _FF_GoalScorers;
		
		private EntityRef<FF_League> _FF_League;
		
		private EntityRef<FF_Season> _FF_Season;
		
		private EntityRef<FF_Team> _FF_Team;
		
		private EntityRef<FF_Team> _FF_Team1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSeasonIDChanging(System.Guid value);
    partial void OnSeasonIDChanged();
    partial void OnLeagueIDChanging(int value);
    partial void OnLeagueIDChanged();
    partial void OnTeam1IDChanging(System.Guid value);
    partial void OnTeam1IDChanged();
    partial void OnTeam2IDChanging(System.Guid value);
    partial void OnTeam2IDChanged();
    partial void OnTeam1PlayerImageURLChanging(string value);
    partial void OnTeam1PlayerImageURLChanged();
    partial void OnTeam2PlayerImageURLChanging(string value);
    partial void OnTeam2PlayerImageURLChanged();
    partial void OnTeam1DetailsChanging(string value);
    partial void OnTeam1DetailsChanged();
    partial void OnTeam2DetailsChanging(string value);
    partial void OnTeam2DetailsChanged();
    partial void OnTeam1PlayerNameChanging(string value);
    partial void OnTeam1PlayerNameChanged();
    partial void OnTeam2PlayerNameChanging(string value);
    partial void OnTeam2PlayerNameChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnTeam1ScoreChanging(int value);
    partial void OnTeam1ScoreChanged();
    partial void OnTeam2ScoreChanging(int value);
    partial void OnTeam2ScoreChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public FF_Match()
		{
			this._FF_GoalScorers = new EntitySet<FF_GoalScorer>(new Action<FF_GoalScorer>(this.attach_FF_GoalScorers), new Action<FF_GoalScorer>(this.detach_FF_GoalScorers));
			this._FF_League = default(EntityRef<FF_League>);
			this._FF_Season = default(EntityRef<FF_Season>);
			this._FF_Team = default(EntityRef<FF_Team>);
			this._FF_Team1 = default(EntityRef<FF_Team>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_SeasonID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SeasonID
		{
			get
			{
				return this._SeasonID;
			}
			set
			{
				if ((this._SeasonID != value))
				{
					if (this._FF_Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._SeasonID = value;
					this.SendPropertyChanged("SeasonID");
					this.OnSeasonIDChanged();
				}
			}
		}
		
		[Column(Storage="_LeagueID", DbType="Int NOT NULL")]
		public int LeagueID
		{
			get
			{
				return this._LeagueID;
			}
			set
			{
				if ((this._LeagueID != value))
				{
					if (this._FF_League.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueID = value;
					this.SendPropertyChanged("LeagueID");
					this.OnLeagueIDChanged();
				}
			}
		}
		
		[Column(Storage="_Team1ID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Team1ID
		{
			get
			{
				return this._Team1ID;
			}
			set
			{
				if ((this._Team1ID != value))
				{
					if (this._FF_Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeam1IDChanging(value);
					this.SendPropertyChanging();
					this._Team1ID = value;
					this.SendPropertyChanged("Team1ID");
					this.OnTeam1IDChanged();
				}
			}
		}
		
		[Column(Storage="_Team2ID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Team2ID
		{
			get
			{
				return this._Team2ID;
			}
			set
			{
				if ((this._Team2ID != value))
				{
					if (this._FF_Team1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeam2IDChanging(value);
					this.SendPropertyChanging();
					this._Team2ID = value;
					this.SendPropertyChanged("Team2ID");
					this.OnTeam2IDChanged();
				}
			}
		}
		
		[Column(Storage="_Team1PlayerImageURL", DbType="NVarChar(200)")]
		public string Team1PlayerImageURL
		{
			get
			{
				return this._Team1PlayerImageURL;
			}
			set
			{
				if ((this._Team1PlayerImageURL != value))
				{
					this.OnTeam1PlayerImageURLChanging(value);
					this.SendPropertyChanging();
					this._Team1PlayerImageURL = value;
					this.SendPropertyChanged("Team1PlayerImageURL");
					this.OnTeam1PlayerImageURLChanged();
				}
			}
		}
		
		[Column(Storage="_Team2PlayerImageURL", DbType="NVarChar(200)")]
		public string Team2PlayerImageURL
		{
			get
			{
				return this._Team2PlayerImageURL;
			}
			set
			{
				if ((this._Team2PlayerImageURL != value))
				{
					this.OnTeam2PlayerImageURLChanging(value);
					this.SendPropertyChanging();
					this._Team2PlayerImageURL = value;
					this.SendPropertyChanged("Team2PlayerImageURL");
					this.OnTeam2PlayerImageURLChanged();
				}
			}
		}
		
		[Column(Storage="_Team1Details", DbType="NVarChar(MAX)")]
		public string Team1Details
		{
			get
			{
				return this._Team1Details;
			}
			set
			{
				if ((this._Team1Details != value))
				{
					this.OnTeam1DetailsChanging(value);
					this.SendPropertyChanging();
					this._Team1Details = value;
					this.SendPropertyChanged("Team1Details");
					this.OnTeam1DetailsChanged();
				}
			}
		}
		
		[Column(Storage="_Team2Details", DbType="NVarChar(MAX)")]
		public string Team2Details
		{
			get
			{
				return this._Team2Details;
			}
			set
			{
				if ((this._Team2Details != value))
				{
					this.OnTeam2DetailsChanging(value);
					this.SendPropertyChanging();
					this._Team2Details = value;
					this.SendPropertyChanged("Team2Details");
					this.OnTeam2DetailsChanged();
				}
			}
		}
		
		[Column(Storage="_Team1PlayerName", DbType="NVarChar(50)")]
		public string Team1PlayerName
		{
			get
			{
				return this._Team1PlayerName;
			}
			set
			{
				if ((this._Team1PlayerName != value))
				{
					this.OnTeam1PlayerNameChanging(value);
					this.SendPropertyChanging();
					this._Team1PlayerName = value;
					this.SendPropertyChanged("Team1PlayerName");
					this.OnTeam1PlayerNameChanged();
				}
			}
		}
		
		[Column(Storage="_Team2PlayerName", DbType="NVarChar(50)")]
		public string Team2PlayerName
		{
			get
			{
				return this._Team2PlayerName;
			}
			set
			{
				if ((this._Team2PlayerName != value))
				{
					this.OnTeam2PlayerNameChanging(value);
					this.SendPropertyChanging();
					this._Team2PlayerName = value;
					this.SendPropertyChanged("Team2PlayerName");
					this.OnTeam2PlayerNameChanged();
				}
			}
		}
		
		[Column(Storage="_Location", DbType="NVarChar(100)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[Column(Storage="_Team1Score", DbType="Int NOT NULL")]
		public int Team1Score
		{
			get
			{
				return this._Team1Score;
			}
			set
			{
				if ((this._Team1Score != value))
				{
					this.OnTeam1ScoreChanging(value);
					this.SendPropertyChanging();
					this._Team1Score = value;
					this.SendPropertyChanged("Team1Score");
					this.OnTeam1ScoreChanged();
				}
			}
		}
		
		[Column(Storage="_Team2Score", DbType="Int NOT NULL")]
		public int Team2Score
		{
			get
			{
				return this._Team2Score;
			}
			set
			{
				if ((this._Team2Score != value))
				{
					this.OnTeam2ScoreChanging(value);
					this.SendPropertyChanging();
					this._Team2Score = value;
					this.SendPropertyChanged("Team2Score");
					this.OnTeam2ScoreChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Association(Name="FF_Match_FF_GoalScorer", Storage="_FF_GoalScorers", OtherKey="MatchID")]
		public EntitySet<FF_GoalScorer> FF_GoalScorers
		{
			get
			{
				return this._FF_GoalScorers;
			}
			set
			{
				this._FF_GoalScorers.Assign(value);
			}
		}
		
		[Association(Name="FF_League_FF_Match", Storage="_FF_League", ThisKey="LeagueID", IsForeignKey=true)]
		public FF_League FF_League
		{
			get
			{
				return this._FF_League.Entity;
			}
			set
			{
				FF_League previousValue = this._FF_League.Entity;
				if (((previousValue != value) 
							|| (this._FF_League.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_League.Entity = null;
						previousValue.FF_Matches.Remove(this);
					}
					this._FF_League.Entity = value;
					if ((value != null))
					{
						value.FF_Matches.Add(this);
						this._LeagueID = value.LeagueID;
					}
					else
					{
						this._LeagueID = default(int);
					}
					this.SendPropertyChanged("FF_League");
				}
			}
		}
		
		[Association(Name="FF_Season_FF_Match", Storage="_FF_Season", ThisKey="SeasonID", IsForeignKey=true)]
		public FF_Season FF_Season
		{
			get
			{
				return this._FF_Season.Entity;
			}
			set
			{
				FF_Season previousValue = this._FF_Season.Entity;
				if (((previousValue != value) 
							|| (this._FF_Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_Season.Entity = null;
						previousValue.FF_Matches.Remove(this);
					}
					this._FF_Season.Entity = value;
					if ((value != null))
					{
						value.FF_Matches.Add(this);
						this._SeasonID = value.SeasonID;
					}
					else
					{
						this._SeasonID = default(System.Guid);
					}
					this.SendPropertyChanged("FF_Season");
				}
			}
		}
		
		[Association(Name="FF_Team_FF_Match", Storage="_FF_Team", ThisKey="Team1ID", IsForeignKey=true)]
		public FF_Team FF_Team
		{
			get
			{
				return this._FF_Team.Entity;
			}
			set
			{
				FF_Team previousValue = this._FF_Team.Entity;
				if (((previousValue != value) 
							|| (this._FF_Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_Team.Entity = null;
						previousValue.FF_Matches.Remove(this);
					}
					this._FF_Team.Entity = value;
					if ((value != null))
					{
						value.FF_Matches.Add(this);
						this._Team1ID = value.TeamID;
					}
					else
					{
						this._Team1ID = default(System.Guid);
					}
					this.SendPropertyChanged("FF_Team");
				}
			}
		}
		
		[Association(Name="FF_Team_FF_Match1", Storage="_FF_Team1", ThisKey="Team2ID", IsForeignKey=true)]
		public FF_Team FF_Team1
		{
			get
			{
				return this._FF_Team1.Entity;
			}
			set
			{
				FF_Team previousValue = this._FF_Team1.Entity;
				if (((previousValue != value) 
							|| (this._FF_Team1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_Team1.Entity = null;
						previousValue.FF_Matches1.Remove(this);
					}
					this._FF_Team1.Entity = value;
					if ((value != null))
					{
						value.FF_Matches1.Add(this);
						this._Team2ID = value.TeamID;
					}
					else
					{
						this._Team2ID = default(System.Guid);
					}
					this.SendPropertyChanged("FF_Team1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FF_GoalScorers(FF_GoalScorer entity)
		{
			this.SendPropertyChanging();
			entity.FF_Match = this;
		}
		
		private void detach_FF_GoalScorers(FF_GoalScorer entity)
		{
			this.SendPropertyChanging();
			entity.FF_Match = null;
		}
	}
	
	[Table(Name="dbo.FF_News")]
	public partial class FF_New : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NewsID;
		
		private string _Title;
		
		private string _Details;
		
		private string _ImageURL;
		
		private System.Nullable<int> _LeagueID;
		
		private System.DateTime _Date;
		
		private System.Nullable<System.Guid> _SeasonID;
		
		private EntityRef<FF_League> _FF_League;
		
		private EntityRef<FF_Season> _FF_Season;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsIDChanging(System.Guid value);
    partial void OnNewsIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnImageURLChanging(string value);
    partial void OnImageURLChanged();
    partial void OnLeagueIDChanging(System.Nullable<int> value);
    partial void OnLeagueIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnSeasonIDChanging(System.Nullable<System.Guid> value);
    partial void OnSeasonIDChanged();
    #endregion
		
		public FF_New()
		{
			this._FF_League = default(EntityRef<FF_League>);
			this._FF_Season = default(EntityRef<FF_Season>);
			OnCreated();
		}
		
		[Column(Storage="_NewsID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NewsID
		{
			get
			{
				return this._NewsID;
			}
			set
			{
				if ((this._NewsID != value))
				{
					this.OnNewsIDChanging(value);
					this.SendPropertyChanging();
					this._NewsID = value;
					this.SendPropertyChanged("NewsID");
					this.OnNewsIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Details", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[Column(Storage="_ImageURL", DbType="NVarChar(200)")]
		public string ImageURL
		{
			get
			{
				return this._ImageURL;
			}
			set
			{
				if ((this._ImageURL != value))
				{
					this.OnImageURLChanging(value);
					this.SendPropertyChanging();
					this._ImageURL = value;
					this.SendPropertyChanged("ImageURL");
					this.OnImageURLChanged();
				}
			}
		}
		
		[Column(Storage="_LeagueID", DbType="Int")]
		public System.Nullable<int> LeagueID
		{
			get
			{
				return this._LeagueID;
			}
			set
			{
				if ((this._LeagueID != value))
				{
					if (this._FF_League.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueID = value;
					this.SendPropertyChanged("LeagueID");
					this.OnLeagueIDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_SeasonID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SeasonID
		{
			get
			{
				return this._SeasonID;
			}
			set
			{
				if ((this._SeasonID != value))
				{
					if (this._FF_Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._SeasonID = value;
					this.SendPropertyChanged("SeasonID");
					this.OnSeasonIDChanged();
				}
			}
		}
		
		[Association(Name="FF_League_FF_New", Storage="_FF_League", ThisKey="LeagueID", IsForeignKey=true, DeleteRule="CASCADE")]
		public FF_League FF_League
		{
			get
			{
				return this._FF_League.Entity;
			}
			set
			{
				FF_League previousValue = this._FF_League.Entity;
				if (((previousValue != value) 
							|| (this._FF_League.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_League.Entity = null;
						previousValue.FF_News.Remove(this);
					}
					this._FF_League.Entity = value;
					if ((value != null))
					{
						value.FF_News.Add(this);
						this._LeagueID = value.LeagueID;
					}
					else
					{
						this._LeagueID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FF_League");
				}
			}
		}
		
		[Association(Name="FF_Season_FF_New", Storage="_FF_Season", ThisKey="SeasonID", IsForeignKey=true)]
		public FF_Season FF_Season
		{
			get
			{
				return this._FF_Season.Entity;
			}
			set
			{
				FF_Season previousValue = this._FF_Season.Entity;
				if (((previousValue != value) 
							|| (this._FF_Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_Season.Entity = null;
						previousValue.FF_News.Remove(this);
					}
					this._FF_Season.Entity = value;
					if ((value != null))
					{
						value.FF_News.Add(this);
						this._SeasonID = value.SeasonID;
					}
					else
					{
						this._SeasonID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("FF_Season");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FF_Polls")]
	public partial class FF_Poll : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Question;
		
		private string _Option1;
		
		private string _Option2;
		
		private string _Option3;
		
		private string _Other;
		
		private System.DateTime _Date;
		
		private EntitySet<FF_Vote> _FF_Votes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnQuestionChanging(string value);
    partial void OnQuestionChanged();
    partial void OnOption1Changing(string value);
    partial void OnOption1Changed();
    partial void OnOption2Changing(string value);
    partial void OnOption2Changed();
    partial void OnOption3Changing(string value);
    partial void OnOption3Changed();
    partial void OnOtherChanging(string value);
    partial void OnOtherChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public FF_Poll()
		{
			this._FF_Votes = new EntitySet<FF_Vote>(new Action<FF_Vote>(this.attach_FF_Votes), new Action<FF_Vote>(this.detach_FF_Votes));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Question", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				if ((this._Question != value))
				{
					this.OnQuestionChanging(value);
					this.SendPropertyChanging();
					this._Question = value;
					this.SendPropertyChanged("Question");
					this.OnQuestionChanged();
				}
			}
		}
		
		[Column(Storage="_Option1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Option1
		{
			get
			{
				return this._Option1;
			}
			set
			{
				if ((this._Option1 != value))
				{
					this.OnOption1Changing(value);
					this.SendPropertyChanging();
					this._Option1 = value;
					this.SendPropertyChanged("Option1");
					this.OnOption1Changed();
				}
			}
		}
		
		[Column(Storage="_Option2", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Option2
		{
			get
			{
				return this._Option2;
			}
			set
			{
				if ((this._Option2 != value))
				{
					this.OnOption2Changing(value);
					this.SendPropertyChanging();
					this._Option2 = value;
					this.SendPropertyChanged("Option2");
					this.OnOption2Changed();
				}
			}
		}
		
		[Column(Storage="_Option3", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Option3
		{
			get
			{
				return this._Option3;
			}
			set
			{
				if ((this._Option3 != value))
				{
					this.OnOption3Changing(value);
					this.SendPropertyChanging();
					this._Option3 = value;
					this.SendPropertyChanged("Option3");
					this.OnOption3Changed();
				}
			}
		}
		
		[Column(Storage="_Other", DbType="NVarChar(50)")]
		public string Other
		{
			get
			{
				return this._Other;
			}
			set
			{
				if ((this._Other != value))
				{
					this.OnOtherChanging(value);
					this.SendPropertyChanging();
					this._Other = value;
					this.SendPropertyChanged("Other");
					this.OnOtherChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Association(Name="FF_Poll_FF_Vote", Storage="_FF_Votes", OtherKey="QuestionID")]
		public EntitySet<FF_Vote> FF_Votes
		{
			get
			{
				return this._FF_Votes;
			}
			set
			{
				this._FF_Votes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FF_Votes(FF_Vote entity)
		{
			this.SendPropertyChanging();
			entity.FF_Poll = this;
		}
		
		private void detach_FF_Votes(FF_Vote entity)
		{
			this.SendPropertyChanging();
			entity.FF_Poll = null;
		}
	}
	
	[Table(Name="dbo.FF_Roles")]
	public partial class FF_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _RoleType;
		
		private EntitySet<FF_User> _FF_Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRoleTypeChanging(string value);
    partial void OnRoleTypeChanged();
    #endregion
		
		public FF_Role()
		{
			this._FF_Users = new EntitySet<FF_User>(new Action<FF_User>(this.attach_FF_Users), new Action<FF_User>(this.detach_FF_Users));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleType", DbType="NVarChar(10)")]
		public string RoleType
		{
			get
			{
				return this._RoleType;
			}
			set
			{
				if ((this._RoleType != value))
				{
					this.OnRoleTypeChanging(value);
					this.SendPropertyChanging();
					this._RoleType = value;
					this.SendPropertyChanged("RoleType");
					this.OnRoleTypeChanged();
				}
			}
		}
		
		[Association(Name="FF_Role_FF_User", Storage="_FF_Users", OtherKey="RoleTypeID")]
		public EntitySet<FF_User> FF_Users
		{
			get
			{
				return this._FF_Users;
			}
			set
			{
				this._FF_Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FF_Users(FF_User entity)
		{
			this.SendPropertyChanging();
			entity.FF_Role = this;
		}
		
		private void detach_FF_Users(FF_User entity)
		{
			this.SendPropertyChanging();
			entity.FF_Role = null;
		}
	}
	
	[Table(Name="dbo.FF_Season")]
	public partial class FF_Season : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SeasonID;
		
		private string _Period;
		
		private bool _IsCurrent;
		
		private EntitySet<FF_ChampionsGroupStage> _FF_ChampionsGroupStages;
		
		private EntitySet<FF_ChampionsLeagueTable> _FF_ChampionsLeagueTables;
		
		private EntitySet<FF_ChampionsOtherStage> _FF_ChampionsOtherStages;
		
		private EntitySet<FF_LeagueTable> _FF_LeagueTables;
		
		private EntitySet<FF_Match> _FF_Matches;
		
		private EntitySet<FF_New> _FF_News;
		
		private EntitySet<FF_TopScorer> _FF_TopScorers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeasonIDChanging(System.Guid value);
    partial void OnSeasonIDChanged();
    partial void OnPeriodChanging(string value);
    partial void OnPeriodChanged();
    partial void OnIsCurrentChanging(bool value);
    partial void OnIsCurrentChanged();
    #endregion
		
		public FF_Season()
		{
			this._FF_ChampionsGroupStages = new EntitySet<FF_ChampionsGroupStage>(new Action<FF_ChampionsGroupStage>(this.attach_FF_ChampionsGroupStages), new Action<FF_ChampionsGroupStage>(this.detach_FF_ChampionsGroupStages));
			this._FF_ChampionsLeagueTables = new EntitySet<FF_ChampionsLeagueTable>(new Action<FF_ChampionsLeagueTable>(this.attach_FF_ChampionsLeagueTables), new Action<FF_ChampionsLeagueTable>(this.detach_FF_ChampionsLeagueTables));
			this._FF_ChampionsOtherStages = new EntitySet<FF_ChampionsOtherStage>(new Action<FF_ChampionsOtherStage>(this.attach_FF_ChampionsOtherStages), new Action<FF_ChampionsOtherStage>(this.detach_FF_ChampionsOtherStages));
			this._FF_LeagueTables = new EntitySet<FF_LeagueTable>(new Action<FF_LeagueTable>(this.attach_FF_LeagueTables), new Action<FF_LeagueTable>(this.detach_FF_LeagueTables));
			this._FF_Matches = new EntitySet<FF_Match>(new Action<FF_Match>(this.attach_FF_Matches), new Action<FF_Match>(this.detach_FF_Matches));
			this._FF_News = new EntitySet<FF_New>(new Action<FF_New>(this.attach_FF_News), new Action<FF_New>(this.detach_FF_News));
			this._FF_TopScorers = new EntitySet<FF_TopScorer>(new Action<FF_TopScorer>(this.attach_FF_TopScorers), new Action<FF_TopScorer>(this.detach_FF_TopScorers));
			OnCreated();
		}
		
		[Column(Storage="_SeasonID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SeasonID
		{
			get
			{
				return this._SeasonID;
			}
			set
			{
				if ((this._SeasonID != value))
				{
					this.OnSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._SeasonID = value;
					this.SendPropertyChanged("SeasonID");
					this.OnSeasonIDChanged();
				}
			}
		}
		
		[Column(Storage="_Period", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Period
		{
			get
			{
				return this._Period;
			}
			set
			{
				if ((this._Period != value))
				{
					this.OnPeriodChanging(value);
					this.SendPropertyChanging();
					this._Period = value;
					this.SendPropertyChanged("Period");
					this.OnPeriodChanged();
				}
			}
		}
		
		[Column(Storage="_IsCurrent", DbType="Bit NOT NULL")]
		public bool IsCurrent
		{
			get
			{
				return this._IsCurrent;
			}
			set
			{
				if ((this._IsCurrent != value))
				{
					this.OnIsCurrentChanging(value);
					this.SendPropertyChanging();
					this._IsCurrent = value;
					this.SendPropertyChanged("IsCurrent");
					this.OnIsCurrentChanged();
				}
			}
		}
		
		[Association(Name="FF_Season_FF_ChampionsGroupStage", Storage="_FF_ChampionsGroupStages", OtherKey="SeasonID")]
		public EntitySet<FF_ChampionsGroupStage> FF_ChampionsGroupStages
		{
			get
			{
				return this._FF_ChampionsGroupStages;
			}
			set
			{
				this._FF_ChampionsGroupStages.Assign(value);
			}
		}
		
		[Association(Name="FF_Season_FF_ChampionsLeagueTable", Storage="_FF_ChampionsLeagueTables", OtherKey="SeasonID")]
		public EntitySet<FF_ChampionsLeagueTable> FF_ChampionsLeagueTables
		{
			get
			{
				return this._FF_ChampionsLeagueTables;
			}
			set
			{
				this._FF_ChampionsLeagueTables.Assign(value);
			}
		}
		
		[Association(Name="FF_Season_FF_ChampionsOtherStage", Storage="_FF_ChampionsOtherStages", OtherKey="SeasonID")]
		public EntitySet<FF_ChampionsOtherStage> FF_ChampionsOtherStages
		{
			get
			{
				return this._FF_ChampionsOtherStages;
			}
			set
			{
				this._FF_ChampionsOtherStages.Assign(value);
			}
		}
		
		[Association(Name="FF_Season_FF_LeagueTable", Storage="_FF_LeagueTables", OtherKey="SeasonID")]
		public EntitySet<FF_LeagueTable> FF_LeagueTables
		{
			get
			{
				return this._FF_LeagueTables;
			}
			set
			{
				this._FF_LeagueTables.Assign(value);
			}
		}
		
		[Association(Name="FF_Season_FF_Match", Storage="_FF_Matches", OtherKey="SeasonID")]
		public EntitySet<FF_Match> FF_Matches
		{
			get
			{
				return this._FF_Matches;
			}
			set
			{
				this._FF_Matches.Assign(value);
			}
		}
		
		[Association(Name="FF_Season_FF_New", Storage="_FF_News", OtherKey="SeasonID")]
		public EntitySet<FF_New> FF_News
		{
			get
			{
				return this._FF_News;
			}
			set
			{
				this._FF_News.Assign(value);
			}
		}
		
		[Association(Name="FF_Season_FF_TopScorer", Storage="_FF_TopScorers", OtherKey="SeasonID")]
		public EntitySet<FF_TopScorer> FF_TopScorers
		{
			get
			{
				return this._FF_TopScorers;
			}
			set
			{
				this._FF_TopScorers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FF_ChampionsGroupStages(FF_ChampionsGroupStage entity)
		{
			this.SendPropertyChanging();
			entity.FF_Season = this;
		}
		
		private void detach_FF_ChampionsGroupStages(FF_ChampionsGroupStage entity)
		{
			this.SendPropertyChanging();
			entity.FF_Season = null;
		}
		
		private void attach_FF_ChampionsLeagueTables(FF_ChampionsLeagueTable entity)
		{
			this.SendPropertyChanging();
			entity.FF_Season = this;
		}
		
		private void detach_FF_ChampionsLeagueTables(FF_ChampionsLeagueTable entity)
		{
			this.SendPropertyChanging();
			entity.FF_Season = null;
		}
		
		private void attach_FF_ChampionsOtherStages(FF_ChampionsOtherStage entity)
		{
			this.SendPropertyChanging();
			entity.FF_Season = this;
		}
		
		private void detach_FF_ChampionsOtherStages(FF_ChampionsOtherStage entity)
		{
			this.SendPropertyChanging();
			entity.FF_Season = null;
		}
		
		private void attach_FF_LeagueTables(FF_LeagueTable entity)
		{
			this.SendPropertyChanging();
			entity.FF_Season = this;
		}
		
		private void detach_FF_LeagueTables(FF_LeagueTable entity)
		{
			this.SendPropertyChanging();
			entity.FF_Season = null;
		}
		
		private void attach_FF_Matches(FF_Match entity)
		{
			this.SendPropertyChanging();
			entity.FF_Season = this;
		}
		
		private void detach_FF_Matches(FF_Match entity)
		{
			this.SendPropertyChanging();
			entity.FF_Season = null;
		}
		
		private void attach_FF_News(FF_New entity)
		{
			this.SendPropertyChanging();
			entity.FF_Season = this;
		}
		
		private void detach_FF_News(FF_New entity)
		{
			this.SendPropertyChanging();
			entity.FF_Season = null;
		}
		
		private void attach_FF_TopScorers(FF_TopScorer entity)
		{
			this.SendPropertyChanging();
			entity.FF_Season = this;
		}
		
		private void detach_FF_TopScorers(FF_TopScorer entity)
		{
			this.SendPropertyChanging();
			entity.FF_Season = null;
		}
	}
	
	[Table(Name="dbo.FF_Teams")]
	public partial class FF_Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TeamID;
		
		private int _LeagueID;
		
		private string _Name;
		
		private string _LogoURL;
		
		private EntitySet<FF_ChampionGoalScorer> _FF_ChampionGoalScorers;
		
		private EntitySet<FF_ChampionsGroupStage> _FF_ChampionsGroupStages;
		
		private EntitySet<FF_ChampionsGroupStage> _FF_ChampionsGroupStages1;
		
		private EntitySet<FF_ChampionsLeagueTable> _FF_ChampionsLeagueTables;
		
		private EntitySet<FF_ChampionsOtherStage> _FF_ChampionsOtherStages;
		
		private EntitySet<FF_ChampionsOtherStage> _FF_ChampionsOtherStages1;
		
		private EntitySet<FF_GoalScorer> _FF_GoalScorers;
		
		private EntitySet<FF_LeagueTable> _FF_LeagueTables;
		
		private EntitySet<FF_Match> _FF_Matches;
		
		private EntitySet<FF_Match> _FF_Matches1;
		
		private EntityRef<FF_League> _FF_League;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIDChanging(System.Guid value);
    partial void OnTeamIDChanged();
    partial void OnLeagueIDChanging(int value);
    partial void OnLeagueIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLogoURLChanging(string value);
    partial void OnLogoURLChanged();
    #endregion
		
		public FF_Team()
		{
			this._FF_ChampionGoalScorers = new EntitySet<FF_ChampionGoalScorer>(new Action<FF_ChampionGoalScorer>(this.attach_FF_ChampionGoalScorers), new Action<FF_ChampionGoalScorer>(this.detach_FF_ChampionGoalScorers));
			this._FF_ChampionsGroupStages = new EntitySet<FF_ChampionsGroupStage>(new Action<FF_ChampionsGroupStage>(this.attach_FF_ChampionsGroupStages), new Action<FF_ChampionsGroupStage>(this.detach_FF_ChampionsGroupStages));
			this._FF_ChampionsGroupStages1 = new EntitySet<FF_ChampionsGroupStage>(new Action<FF_ChampionsGroupStage>(this.attach_FF_ChampionsGroupStages1), new Action<FF_ChampionsGroupStage>(this.detach_FF_ChampionsGroupStages1));
			this._FF_ChampionsLeagueTables = new EntitySet<FF_ChampionsLeagueTable>(new Action<FF_ChampionsLeagueTable>(this.attach_FF_ChampionsLeagueTables), new Action<FF_ChampionsLeagueTable>(this.detach_FF_ChampionsLeagueTables));
			this._FF_ChampionsOtherStages = new EntitySet<FF_ChampionsOtherStage>(new Action<FF_ChampionsOtherStage>(this.attach_FF_ChampionsOtherStages), new Action<FF_ChampionsOtherStage>(this.detach_FF_ChampionsOtherStages));
			this._FF_ChampionsOtherStages1 = new EntitySet<FF_ChampionsOtherStage>(new Action<FF_ChampionsOtherStage>(this.attach_FF_ChampionsOtherStages1), new Action<FF_ChampionsOtherStage>(this.detach_FF_ChampionsOtherStages1));
			this._FF_GoalScorers = new EntitySet<FF_GoalScorer>(new Action<FF_GoalScorer>(this.attach_FF_GoalScorers), new Action<FF_GoalScorer>(this.detach_FF_GoalScorers));
			this._FF_LeagueTables = new EntitySet<FF_LeagueTable>(new Action<FF_LeagueTable>(this.attach_FF_LeagueTables), new Action<FF_LeagueTable>(this.detach_FF_LeagueTables));
			this._FF_Matches = new EntitySet<FF_Match>(new Action<FF_Match>(this.attach_FF_Matches), new Action<FF_Match>(this.detach_FF_Matches));
			this._FF_Matches1 = new EntitySet<FF_Match>(new Action<FF_Match>(this.attach_FF_Matches1), new Action<FF_Match>(this.detach_FF_Matches1));
			this._FF_League = default(EntityRef<FF_League>);
			OnCreated();
		}
		
		[Column(Storage="_TeamID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[Column(Storage="_LeagueID", DbType="Int NOT NULL")]
		public int LeagueID
		{
			get
			{
				return this._LeagueID;
			}
			set
			{
				if ((this._LeagueID != value))
				{
					if (this._FF_League.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueID = value;
					this.SendPropertyChanged("LeagueID");
					this.OnLeagueIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_LogoURL", DbType="NVarChar(200)")]
		public string LogoURL
		{
			get
			{
				return this._LogoURL;
			}
			set
			{
				if ((this._LogoURL != value))
				{
					this.OnLogoURLChanging(value);
					this.SendPropertyChanging();
					this._LogoURL = value;
					this.SendPropertyChanged("LogoURL");
					this.OnLogoURLChanged();
				}
			}
		}
		
		[Association(Name="FF_Team_FF_ChampionGoalScorer", Storage="_FF_ChampionGoalScorers", OtherKey="TeamID")]
		public EntitySet<FF_ChampionGoalScorer> FF_ChampionGoalScorers
		{
			get
			{
				return this._FF_ChampionGoalScorers;
			}
			set
			{
				this._FF_ChampionGoalScorers.Assign(value);
			}
		}
		
		[Association(Name="FF_Team_FF_ChampionsGroupStage", Storage="_FF_ChampionsGroupStages", OtherKey="Team1ID")]
		public EntitySet<FF_ChampionsGroupStage> FF_ChampionsGroupStages
		{
			get
			{
				return this._FF_ChampionsGroupStages;
			}
			set
			{
				this._FF_ChampionsGroupStages.Assign(value);
			}
		}
		
		[Association(Name="FF_Team_FF_ChampionsGroupStage1", Storage="_FF_ChampionsGroupStages1", OtherKey="Team2ID")]
		public EntitySet<FF_ChampionsGroupStage> FF_ChampionsGroupStages1
		{
			get
			{
				return this._FF_ChampionsGroupStages1;
			}
			set
			{
				this._FF_ChampionsGroupStages1.Assign(value);
			}
		}
		
		[Association(Name="FF_Team_FF_ChampionsLeagueTable", Storage="_FF_ChampionsLeagueTables", OtherKey="TeamID")]
		public EntitySet<FF_ChampionsLeagueTable> FF_ChampionsLeagueTables
		{
			get
			{
				return this._FF_ChampionsLeagueTables;
			}
			set
			{
				this._FF_ChampionsLeagueTables.Assign(value);
			}
		}
		
		[Association(Name="FF_Team_FF_ChampionsOtherStage", Storage="_FF_ChampionsOtherStages", OtherKey="Team1ID")]
		public EntitySet<FF_ChampionsOtherStage> FF_ChampionsOtherStages
		{
			get
			{
				return this._FF_ChampionsOtherStages;
			}
			set
			{
				this._FF_ChampionsOtherStages.Assign(value);
			}
		}
		
		[Association(Name="FF_Team_FF_ChampionsOtherStage1", Storage="_FF_ChampionsOtherStages1", OtherKey="Team2ID")]
		public EntitySet<FF_ChampionsOtherStage> FF_ChampionsOtherStages1
		{
			get
			{
				return this._FF_ChampionsOtherStages1;
			}
			set
			{
				this._FF_ChampionsOtherStages1.Assign(value);
			}
		}
		
		[Association(Name="FF_Team_FF_GoalScorer", Storage="_FF_GoalScorers", OtherKey="TeamID")]
		public EntitySet<FF_GoalScorer> FF_GoalScorers
		{
			get
			{
				return this._FF_GoalScorers;
			}
			set
			{
				this._FF_GoalScorers.Assign(value);
			}
		}
		
		[Association(Name="FF_Team_FF_LeagueTable", Storage="_FF_LeagueTables", OtherKey="TeamID")]
		public EntitySet<FF_LeagueTable> FF_LeagueTables
		{
			get
			{
				return this._FF_LeagueTables;
			}
			set
			{
				this._FF_LeagueTables.Assign(value);
			}
		}
		
		[Association(Name="FF_Team_FF_Match", Storage="_FF_Matches", OtherKey="Team1ID")]
		public EntitySet<FF_Match> FF_Matches
		{
			get
			{
				return this._FF_Matches;
			}
			set
			{
				this._FF_Matches.Assign(value);
			}
		}
		
		[Association(Name="FF_Team_FF_Match1", Storage="_FF_Matches1", OtherKey="Team2ID")]
		public EntitySet<FF_Match> FF_Matches1
		{
			get
			{
				return this._FF_Matches1;
			}
			set
			{
				this._FF_Matches1.Assign(value);
			}
		}
		
		[Association(Name="FF_League_FF_Team", Storage="_FF_League", ThisKey="LeagueID", IsForeignKey=true)]
		public FF_League FF_League
		{
			get
			{
				return this._FF_League.Entity;
			}
			set
			{
				FF_League previousValue = this._FF_League.Entity;
				if (((previousValue != value) 
							|| (this._FF_League.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_League.Entity = null;
						previousValue.FF_Teams.Remove(this);
					}
					this._FF_League.Entity = value;
					if ((value != null))
					{
						value.FF_Teams.Add(this);
						this._LeagueID = value.LeagueID;
					}
					else
					{
						this._LeagueID = default(int);
					}
					this.SendPropertyChanged("FF_League");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FF_ChampionGoalScorers(FF_ChampionGoalScorer entity)
		{
			this.SendPropertyChanging();
			entity.FF_Team = this;
		}
		
		private void detach_FF_ChampionGoalScorers(FF_ChampionGoalScorer entity)
		{
			this.SendPropertyChanging();
			entity.FF_Team = null;
		}
		
		private void attach_FF_ChampionsGroupStages(FF_ChampionsGroupStage entity)
		{
			this.SendPropertyChanging();
			entity.FF_Team = this;
		}
		
		private void detach_FF_ChampionsGroupStages(FF_ChampionsGroupStage entity)
		{
			this.SendPropertyChanging();
			entity.FF_Team = null;
		}
		
		private void attach_FF_ChampionsGroupStages1(FF_ChampionsGroupStage entity)
		{
			this.SendPropertyChanging();
			entity.FF_Team1 = this;
		}
		
		private void detach_FF_ChampionsGroupStages1(FF_ChampionsGroupStage entity)
		{
			this.SendPropertyChanging();
			entity.FF_Team1 = null;
		}
		
		private void attach_FF_ChampionsLeagueTables(FF_ChampionsLeagueTable entity)
		{
			this.SendPropertyChanging();
			entity.FF_Team = this;
		}
		
		private void detach_FF_ChampionsLeagueTables(FF_ChampionsLeagueTable entity)
		{
			this.SendPropertyChanging();
			entity.FF_Team = null;
		}
		
		private void attach_FF_ChampionsOtherStages(FF_ChampionsOtherStage entity)
		{
			this.SendPropertyChanging();
			entity.FF_Team = this;
		}
		
		private void detach_FF_ChampionsOtherStages(FF_ChampionsOtherStage entity)
		{
			this.SendPropertyChanging();
			entity.FF_Team = null;
		}
		
		private void attach_FF_ChampionsOtherStages1(FF_ChampionsOtherStage entity)
		{
			this.SendPropertyChanging();
			entity.FF_Team1 = this;
		}
		
		private void detach_FF_ChampionsOtherStages1(FF_ChampionsOtherStage entity)
		{
			this.SendPropertyChanging();
			entity.FF_Team1 = null;
		}
		
		private void attach_FF_GoalScorers(FF_GoalScorer entity)
		{
			this.SendPropertyChanging();
			entity.FF_Team = this;
		}
		
		private void detach_FF_GoalScorers(FF_GoalScorer entity)
		{
			this.SendPropertyChanging();
			entity.FF_Team = null;
		}
		
		private void attach_FF_LeagueTables(FF_LeagueTable entity)
		{
			this.SendPropertyChanging();
			entity.FF_Team = this;
		}
		
		private void detach_FF_LeagueTables(FF_LeagueTable entity)
		{
			this.SendPropertyChanging();
			entity.FF_Team = null;
		}
		
		private void attach_FF_Matches(FF_Match entity)
		{
			this.SendPropertyChanging();
			entity.FF_Team = this;
		}
		
		private void detach_FF_Matches(FF_Match entity)
		{
			this.SendPropertyChanging();
			entity.FF_Team = null;
		}
		
		private void attach_FF_Matches1(FF_Match entity)
		{
			this.SendPropertyChanging();
			entity.FF_Team1 = this;
		}
		
		private void detach_FF_Matches1(FF_Match entity)
		{
			this.SendPropertyChanging();
			entity.FF_Team1 = null;
		}
	}
	
	[Table(Name="dbo.FF_TopScorers")]
	public partial class FF_TopScorer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private string _ImageURL;
		
		private int _Goals;
		
		private string _Details;
		
		private System.Guid _SeasonID;
		
		private int _LeagueID;
		
		private long _IsCurrent;
		
		private int _Week;
		
		private EntityRef<FF_League> _FF_League;
		
		private EntityRef<FF_Season> _FF_Season;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnImageURLChanging(string value);
    partial void OnImageURLChanged();
    partial void OnGoalsChanging(int value);
    partial void OnGoalsChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnSeasonIDChanging(System.Guid value);
    partial void OnSeasonIDChanged();
    partial void OnLeagueIDChanging(int value);
    partial void OnLeagueIDChanged();
    partial void OnIsCurrentChanging(long value);
    partial void OnIsCurrentChanged();
    partial void OnWeekChanging(int value);
    partial void OnWeekChanged();
    #endregion
		
		public FF_TopScorer()
		{
			this._FF_League = default(EntityRef<FF_League>);
			this._FF_Season = default(EntityRef<FF_Season>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ImageURL", DbType="NVarChar(200)")]
		public string ImageURL
		{
			get
			{
				return this._ImageURL;
			}
			set
			{
				if ((this._ImageURL != value))
				{
					this.OnImageURLChanging(value);
					this.SendPropertyChanging();
					this._ImageURL = value;
					this.SendPropertyChanged("ImageURL");
					this.OnImageURLChanged();
				}
			}
		}
		
		[Column(Storage="_Goals", DbType="Int NOT NULL")]
		public int Goals
		{
			get
			{
				return this._Goals;
			}
			set
			{
				if ((this._Goals != value))
				{
					this.OnGoalsChanging(value);
					this.SendPropertyChanging();
					this._Goals = value;
					this.SendPropertyChanged("Goals");
					this.OnGoalsChanged();
				}
			}
		}
		
		[Column(Storage="_Details", DbType="NVarChar(MAX)")]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[Column(Storage="_SeasonID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SeasonID
		{
			get
			{
				return this._SeasonID;
			}
			set
			{
				if ((this._SeasonID != value))
				{
					if (this._FF_Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._SeasonID = value;
					this.SendPropertyChanged("SeasonID");
					this.OnSeasonIDChanged();
				}
			}
		}
		
		[Column(Storage="_LeagueID", DbType="Int NOT NULL")]
		public int LeagueID
		{
			get
			{
				return this._LeagueID;
			}
			set
			{
				if ((this._LeagueID != value))
				{
					if (this._FF_League.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueID = value;
					this.SendPropertyChanged("LeagueID");
					this.OnLeagueIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsCurrent", DbType="BigInt NOT NULL")]
		public long IsCurrent
		{
			get
			{
				return this._IsCurrent;
			}
			set
			{
				if ((this._IsCurrent != value))
				{
					this.OnIsCurrentChanging(value);
					this.SendPropertyChanging();
					this._IsCurrent = value;
					this.SendPropertyChanged("IsCurrent");
					this.OnIsCurrentChanged();
				}
			}
		}
		
		[Column(Storage="_Week", DbType="Int NOT NULL")]
		public int Week
		{
			get
			{
				return this._Week;
			}
			set
			{
				if ((this._Week != value))
				{
					this.OnWeekChanging(value);
					this.SendPropertyChanging();
					this._Week = value;
					this.SendPropertyChanged("Week");
					this.OnWeekChanged();
				}
			}
		}
		
		[Association(Name="FF_League_FF_TopScorer", Storage="_FF_League", ThisKey="LeagueID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public FF_League FF_League
		{
			get
			{
				return this._FF_League.Entity;
			}
			set
			{
				FF_League previousValue = this._FF_League.Entity;
				if (((previousValue != value) 
							|| (this._FF_League.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_League.Entity = null;
						previousValue.FF_TopScorers.Remove(this);
					}
					this._FF_League.Entity = value;
					if ((value != null))
					{
						value.FF_TopScorers.Add(this);
						this._LeagueID = value.LeagueID;
					}
					else
					{
						this._LeagueID = default(int);
					}
					this.SendPropertyChanged("FF_League");
				}
			}
		}
		
		[Association(Name="FF_Season_FF_TopScorer", Storage="_FF_Season", ThisKey="SeasonID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public FF_Season FF_Season
		{
			get
			{
				return this._FF_Season.Entity;
			}
			set
			{
				FF_Season previousValue = this._FF_Season.Entity;
				if (((previousValue != value) 
							|| (this._FF_Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_Season.Entity = null;
						previousValue.FF_TopScorers.Remove(this);
					}
					this._FF_Season.Entity = value;
					if ((value != null))
					{
						value.FF_TopScorers.Add(this);
						this._SeasonID = value.SeasonID;
					}
					else
					{
						this._SeasonID = default(System.Guid);
					}
					this.SendPropertyChanged("FF_Season");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FF_User")]
	public partial class FF_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private int _RoleTypeID;
		
		private string _Email;
		
		private string _UserName;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Password;
		
		private string _PhoneNumber;
		
		private string _Country;
		
		private bool _IsLockedOut;
		
		private EntitySet<FF_Article> _FF_Articles;
		
		private EntitySet<FF_UserComment> _FF_UserComments;
		
		private EntityRef<FF_Role> _FF_Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnRoleTypeIDChanging(int value);
    partial void OnRoleTypeIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    #endregion
		
		public FF_User()
		{
			this._FF_Articles = new EntitySet<FF_Article>(new Action<FF_Article>(this.attach_FF_Articles), new Action<FF_Article>(this.detach_FF_Articles));
			this._FF_UserComments = new EntitySet<FF_UserComment>(new Action<FF_UserComment>(this.attach_FF_UserComments), new Action<FF_UserComment>(this.detach_FF_UserComments));
			this._FF_Role = default(EntityRef<FF_Role>);
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleTypeID", DbType="Int NOT NULL")]
		public int RoleTypeID
		{
			get
			{
				return this._RoleTypeID;
			}
			set
			{
				if ((this._RoleTypeID != value))
				{
					if (this._FF_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RoleTypeID = value;
					this.SendPropertyChanged("RoleTypeID");
					this.OnRoleTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(100)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(100)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_PhoneNumber", DbType="NVarChar(50)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Country", DbType="NVarChar(50)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[Column(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
		public bool IsLockedOut
		{
			get
			{
				return this._IsLockedOut;
			}
			set
			{
				if ((this._IsLockedOut != value))
				{
					this.OnIsLockedOutChanging(value);
					this.SendPropertyChanging();
					this._IsLockedOut = value;
					this.SendPropertyChanged("IsLockedOut");
					this.OnIsLockedOutChanged();
				}
			}
		}
		
		[Association(Name="FF_User_FF_Article", Storage="_FF_Articles", OtherKey="UserID")]
		public EntitySet<FF_Article> FF_Articles
		{
			get
			{
				return this._FF_Articles;
			}
			set
			{
				this._FF_Articles.Assign(value);
			}
		}
		
		[Association(Name="FF_User_FF_UserComment", Storage="_FF_UserComments", OtherKey="UserID")]
		public EntitySet<FF_UserComment> FF_UserComments
		{
			get
			{
				return this._FF_UserComments;
			}
			set
			{
				this._FF_UserComments.Assign(value);
			}
		}
		
		[Association(Name="FF_Role_FF_User", Storage="_FF_Role", ThisKey="RoleTypeID", IsForeignKey=true)]
		public FF_Role FF_Role
		{
			get
			{
				return this._FF_Role.Entity;
			}
			set
			{
				FF_Role previousValue = this._FF_Role.Entity;
				if (((previousValue != value) 
							|| (this._FF_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_Role.Entity = null;
						previousValue.FF_Users.Remove(this);
					}
					this._FF_Role.Entity = value;
					if ((value != null))
					{
						value.FF_Users.Add(this);
						this._RoleTypeID = value.ID;
					}
					else
					{
						this._RoleTypeID = default(int);
					}
					this.SendPropertyChanged("FF_Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FF_Articles(FF_Article entity)
		{
			this.SendPropertyChanging();
			entity.FF_User = this;
		}
		
		private void detach_FF_Articles(FF_Article entity)
		{
			this.SendPropertyChanging();
			entity.FF_User = null;
		}
		
		private void attach_FF_UserComments(FF_UserComment entity)
		{
			this.SendPropertyChanging();
			entity.FF_User = this;
		}
		
		private void detach_FF_UserComments(FF_UserComment entity)
		{
			this.SendPropertyChanging();
			entity.FF_User = null;
		}
	}
	
	[Table(Name="dbo.FF_UserComment")]
	public partial class FF_UserComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Guid _UserID;
		
		private string _CommentID;
		
		private EntityRef<FF_Comment> _FF_Comment;
		
		private EntityRef<FF_User> _FF_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnCommentIDChanging(string value);
    partial void OnCommentIDChanged();
    #endregion
		
		public FF_UserComment()
		{
			this._FF_Comment = default(EntityRef<FF_Comment>);
			this._FF_User = default(EntityRef<FF_User>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._FF_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_CommentID", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._FF_Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[Association(Name="FF_Comment_FF_UserComment", Storage="_FF_Comment", ThisKey="CommentID", IsForeignKey=true)]
		public FF_Comment FF_Comment
		{
			get
			{
				return this._FF_Comment.Entity;
			}
			set
			{
				FF_Comment previousValue = this._FF_Comment.Entity;
				if (((previousValue != value) 
							|| (this._FF_Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_Comment.Entity = null;
						previousValue.FF_UserComments.Remove(this);
					}
					this._FF_Comment.Entity = value;
					if ((value != null))
					{
						value.FF_UserComments.Add(this);
						this._CommentID = value.ID;
					}
					else
					{
						this._CommentID = default(string);
					}
					this.SendPropertyChanged("FF_Comment");
				}
			}
		}
		
		[Association(Name="FF_User_FF_UserComment", Storage="_FF_User", ThisKey="UserID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public FF_User FF_User
		{
			get
			{
				return this._FF_User.Entity;
			}
			set
			{
				FF_User previousValue = this._FF_User.Entity;
				if (((previousValue != value) 
							|| (this._FF_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_User.Entity = null;
						previousValue.FF_UserComments.Remove(this);
					}
					this._FF_User.Entity = value;
					if ((value != null))
					{
						value.FF_UserComments.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("FF_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FF_UserComment2")]
	public partial class FF_UserComment2 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _CommentID;
		
		private string _Name;
		
		private string _Email;
		
		private EntityRef<FF_Comment> _FF_Comment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCommentIDChanging(string value);
    partial void OnCommentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public FF_UserComment2()
		{
			this._FF_Comment = default(EntityRef<FF_Comment>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CommentID", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._FF_Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Association(Name="FF_Comment_FF_UserComment2", Storage="_FF_Comment", ThisKey="CommentID", IsForeignKey=true)]
		public FF_Comment FF_Comment
		{
			get
			{
				return this._FF_Comment.Entity;
			}
			set
			{
				FF_Comment previousValue = this._FF_Comment.Entity;
				if (((previousValue != value) 
							|| (this._FF_Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FF_Comment.Entity = null;
						previousValue.FF_UserComment2s.Remove(this);
					}
					this._FF_Comment.Entity = value;
					if ((value != null))
					{
						value.FF_UserComment2s.Add(this);
						this._CommentID = value.ID;
					}
					else
					{
						this._CommentID = default(string);
					}
					this.SendPropertyChanged("FF_Comment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
